{"version":3,"sources":["store.tsx","components/AuthRoute.tsx","api/users/login.api.ts","api/routine/routine.api.ts","api/record/record.api.ts","components/calendar/Calendar.tsx","components/login/Login.tsx","components/record/RecordEditModal.tsx","components/record/Record.tsx","components/create/CreateEditSet.tsx","components/create/CreateEditSetModal.tsx","components/create/CreateExerciseModal.tsx","components/create/CreateRemoveExerciseModal.tsx","components/create/CreateSetModal.tsx","components/create/CreateEditExerciseModal.tsx","components/create/CreateExerciseList.tsx","components/create/CreateExerciseBlockTitle.tsx","components/create/CreateExercise.tsx","components/notfound/NotFound.tsx","components/layout/Navigation.tsx","components/routine/Routine.tsx","App.tsx","index.tsx"],"names":["storeStateContext","createContext","storeDispatchContext","reducer","state","action","type","user","Error","StoreProvider","children","useReducer","dispatch","Provider","value","useStoreState","useContext","useStoreDispatch","AuthRoute","exact","path","render","props","to","pathname","from","location","LoginAPI","data","axios","method","url","resolve","reject","onSilentRefresh","authenticate","then","onLoginSuccess","catch","response","status","setTimeout","RoutineAPI","block_id","encode","encodeURIComponent","exercise_id","id","user_email","routine_id","RecordAPI","record_id","record_item_id","Calendar","scrollRef","React","createRef","week","modal","modal_title","routine_date","block_title","nowDate","year","month","date","blocks","getData","bind","handleChange","handleModal","handleCreateBlock","handleSubmit","handleCreateRecord","this","setState","getProfile","getActiveRoutine","email","ID","getRoutineDates","e","target","date_string","currentTarget","dataset","Date","getFullYear","getMonth","d","getDate","day","getDay","recordData","user_id","getOrCreateRecord","history","push","preventDefault","createBlock","err","console","log","alert","last_date","current","scrollIntoView","className","Container","Card","Body","Table","that","rows","i","keys","Object","today","now","ymd","charAt","is_today","is_weekend","key_index","indexOf","isScrollRef","ref","key","Button","variant","onClick","data-date_string","title","icon","faPlusCircle","block","faBurn","faChevronCircleRight","Modal","show","onHide","animation","centered","Form","onSubmit","Header","closeButton","Title","Group","Label","htmlFor","Control","name","placeholder","onChange","Footer","Component","Login","password","valid_email","valid_password","valid_login","success","regEmail","validate","test","userData","login","context","error","displayNone","display","displayBlock","is_alert","location_pathname","Consumer","store","Alert","hidden","style","size","contextType","RecordEditModal","weight_plate","handlePlateToggle","handleIncrease","update","negativeValid","checked","set_max_reps","Number","max_value","set_reps","default_value","isNaN","updateEditData","increment","valid_update","updateExerciseData","set_number","set_weight","set_disable_range","set_rir","set_rest","set_rest_minute","set_rest_second","updateData","set_id","record_item_number","record_item_weight","record_item_reps","record_item_max_reps","record_item_disable_range","record_item_rir","record_item_rest","record_item_complete","createRecordItem","updateRecordItem","setModal","ButtonGroup","toggle","aria-label","map","item","idx","ToggleButton","InputGroup","Prepend","faAngleDown","Append","faAngleUp","Row","Col","xs","disabled","Check","as","Array","v","column","Record","useHistory","useParams","useState","blockId","setBlockId","setTitle","routineDate","setRoutineDate","setData","complete","setComplete","weight","reps","max_reps","rir","rest_minute","rest_second","editData","setEditData","useEffect","getRecordWithBlock","block_block_title","date_routine_date","exercises","block_ID","getRecordItemsByRecordId","recordCompleteArr","updateExercises","exercise","updateSets","sets","set","updateSet","forEach","record_item_set_disable","split","textAlign","faDumbbell","index","color","exercise_name","set_index","is_complete","completeClass","updateComplete","splice","handleComplete","rest","minute","Math","floor","second","width","handleEdit","faEdit","disableRecordItemData","disable","disableRecordItem","row","handleRemoveSet","faBan","CreateEditSet","parent","prefix","handleIncrement","handleForm","handleRange","handleIncreaseWeight","CreateEditSetModal","edit_ID","edit_exercise_id","edit_set_reps","edit_set_max_reps","edit_set_disable_range","edit_set_weight","edit_set_rir","edit_set_rest_minute","edit_set_rest_second","updateExerciseSet","raw","serverStatus","getExercises","exerciseData","edit_set_modal","handleEditSetModal","edit_exercise_name","edit_set_number","CreateExerciseModal","exerciseRef","border","createExercise","create_modal","handleCreateModal","CreateRemoveExerciseModal","handleRemoveExerciseSubmit","handleRemoveExerciseModal","remove_exercise_id","removeExercise","remove_exercise_modal","fontSize","remove_exercise_name","CreateSetModal","create_set_exercise_id","create_set_weight","create_set_reps","create_set_max_reps","create_set_disable_range","create_set_rir","create_set_rest_minute","create_set_rest_second","createExerciseSet","statusCode","create_set_exercise_name","CreateEditExerciseModal","updateExercise","handleExerciseForm","CreateExerciseList","edit_exercise_modal","create_set_modal","handleEditSet","handleRemoveExercise","handleCreateSetModal","handleCreateSet","handleEditExercise","handleEditExerciseModal","handleEditExerciseForm","removeSetAndReorder","res","setElements","faTrashAlt","colSpan","CreateExerciseBlockTitle","edit_block_title","popover","handlePopover","handleRemove","handlePrevious","getBlock","updateBlock","removeBlock","goBack","sm","md","lg","faChevronLeft","OverlayTrigger","trigger","placement","overlay","Popover","Content","CreateExercise","match","params","validateForm","is_prefix","target_name","increment_value","validNumber","a","number_value","rir_value","rest_value","weight_value","reps_value","max_reps_value","NotFound","Navigation","signInOrOut","useLocation","activeItem","signIn","faSignInAlt","signOut","logout","faSignOutAlt","faCalendarAlt","faClipboardCheck","Routine","App","refresh","component","Root","defaults","baseURL","process","REACT_APP_REST_URI","withCredentials","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b5b164f0.chunk.js","sourcesContent":["import React, { createContext, Dispatch, useReducer, useContext } from \"react\"\n\n\n// Types.\ntype State = {\n    user: number\n}\ntype Action = { type: string }\ntype dispatchType = Dispatch<Action>\n\n\n// Create context.\nexport const storeStateContext = createContext<State | null>( null )\nexport const storeDispatchContext = createContext<dispatchType | null>( null )\n\nfunction reducer( state: State, action: Action ): State {\n    switch ( action.type ) {\n        case 'LOGIN':\n            return { user: 1 }\n\n        case 'LOGOUT':\n            return { user: 0 }\n\n        default:\n            throw new Error( 'Unhandled action' )\n    }\n}\n\nexport function StoreProvider( { children }: { children: React.ReactNode } ) {\n    const [ state, dispatch ] = useReducer( reducer, { user: 0 } )\n\n    return (\n        <storeStateContext.Provider value={ state }>\n            <storeDispatchContext.Provider value={ dispatch }>\n                { children }\n            </storeDispatchContext.Provider>\n        </storeStateContext.Provider>\n    )\n}\n\nexport function useStoreState() {\n    const state = useContext( storeStateContext )\n\n    if ( ! state ) throw new Error( 'Cannot find StoreProvider.' )\n\n    return state\n}\n\nexport function useStoreDispatch() {\n    const dispatch = useContext( storeDispatchContext )\n\n    if ( ! dispatch ) throw new Error( 'Cannot find StoreProvider.' )\n\n    return dispatch\n}","import React from 'react'\nimport { Redirect, Route } from 'react-router'\nimport { useStoreState } from '../store'\n\n\ninterface AuthRoutePropsInterface {\n    path: string\n    render: ( props: any ) => React.ReactNode\n    exact?: boolean\n}\n\n\nexport default function AuthRoute( { exact, path, render }: AuthRoutePropsInterface ) {\n\n    const { user } = useStoreState()\n    \n    return (\n        <Route\n            { ...exact }\n            path={ path }\n            render={\n                props => user ?\n                    render( props ) :\n                    <Redirect to={ { pathname: '/login', state: { from: props.location } } } />\n            }\n        />\n    )\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\nimport { LoginDto } from \"./dto/login.dto\"\n\n\nexport class LoginAPI {\n\n    public static async login( data: LoginDto ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'post',\n            url: '/user/login',\n            data: data\n        } )\n    }\n\n    public static async getProfile(): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: '/user/profile'\n        } )\n    }\n\n    public static async authenticate(): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: '/user/authenticate'\n        } )\n    }\n\n    public static async refresh( resolve: () => void, reject: ( error: AxiosError ) => void ) {\n        const JWT_EXPIRY_TIME = 15 * 3600 * 1000\n\n        const onSilentRefresh = () => {\n            this.authenticate()\n                .then( onLoginSuccess )\n                .catch( reject )\n        }\n\n        const onLoginSuccess = ( response: AxiosResponse ) => {\n            if ( response.status === 200 ) {\n                resolve()\n                setTimeout( onSilentRefresh, JWT_EXPIRY_TIME )\n            }\n        }\n\n        onSilentRefresh()\n    }\n\n    public static async logout() {\n        await axios( {\n            method: 'post',\n            url: '/user/logout'\n        } )\n    }\n\n}","import axios, { AxiosResponse } from 'axios'\n\nimport { RoutineBlockDTO } from './dto/routine.block.dto'\nimport { RoutineCreateSetDTO } from './dto/routine.create.set.dto'\nimport { RoutineExerciseDTO } from './dto/routine.exercise.dto'\nimport { RoutineUpdateSetDTO } from './dto/routine.update.set.dto'\nimport { RoutineUpdateExerciseDTO } from './dto/routine.update.exercise.dto'\nimport { RoutineUpdateBlockDTO } from './dto/routine.update.block.dto'\n\n\nexport class RoutineAPI {\n\n    /** Exercises */\n\n    public static async getExercises( block_id: number ): Promise<AxiosResponse> {\n        const encode = encodeURIComponent( block_id )\n        return await axios( {\n            method: 'get',\n            url: `/routine/exercises/${encode}`\n        } )\n    }\n\n    public static async createExercise( data: RoutineExerciseDTO ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'post',\n            url: '/routine/exercise',\n            data: data\n        } )\n    }\n\n    public static async updateExercise( data: RoutineUpdateExerciseDTO ) {\n        return await axios( {\n            method: 'put',\n            url: '/routine/exercise',\n            data: data\n        } )\n    }\n\n    public static async removeExercise( exercise_id: number ): Promise<AxiosResponse> {\n        const encode = encodeURIComponent( exercise_id )\n        return await axios( {\n            method: 'delete',\n            url: `/routine/exercise/${encode}`\n        } )\n    }\n\n\n    /** Sets */\n\n    public static async createExerciseSet( data: RoutineCreateSetDTO ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'post',\n            url: '/routine/exercise/set',\n            data: data\n        } )\n    }\n\n    public static async updateExerciseSet( data: RoutineUpdateSetDTO ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'put',\n            url: '/routine/exercise/set',\n            data: data\n        } )\n    }\n\n    public static async removeSetAndReorder( id: number, exercise_id: number, block_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'delete',\n            url: `/routine/exercise/set-reorder`,\n            data: {\n                id: id,\n                exercise_id: exercise_id,\n                block_id: block_id\n            }\n        } )\n    }\n\n    public static async updateOrderSetNumber( exercise_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'put',\n            url: `/routine/exercise/order-set/${exercise_id}`\n        } )\n    }\n\n\n    /** Routines */\n\n    public static async getActiveRoutine( user_email: string ): Promise<AxiosResponse> {\n        const encode = encodeURIComponent( user_email )\n\n        return await axios( {\n            method: 'get',\n            url: `/routine/active-routine/${encode}`\n        } )\n    }\n\n\n    /** Routine_dates */\n\n    public static async getRoutineDates( routine_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: `/routine/dates/${routine_id}`\n        } )\n    }\n\n    public static async getRoutineDate( block_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: `/routine/date/${block_id}`\n        } )\n    }\n\n\n    /** Blocks */\n\n    public static async getBlock( block_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: `/routine/block/${block_id}`\n        } )\n    }\n\n    public static async createBlock( data: RoutineBlockDTO ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'post',\n            url: '/routine/block',\n            data: data\n        } )\n    }\n\n    public static async updateBlock( data: RoutineUpdateBlockDTO ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'put',\n            url: '/routine/block',\n            data: data\n        } )\n    }\n\n    public static async removeBlock( block_id: number ): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'delete',\n            url: `/routine/block/${block_id}`\n        } )\n    }\n\n\n    // Utilities\n\n    public static async nowDate(): Promise<AxiosResponse> {\n        return await axios( {\n            method: 'get',\n            url: '/routine/now-date'\n        } )\n    }\n\n}","import axios, { AxiosResponse } from 'axios'\nimport { RecordItemCreateDTO } from './dto/record.item.create.dto';\nimport { RecordCreateDTO } from './dto/record.create.dto';\nimport { RecordItemCompleteDTO } from './dto/record.item.complete.dto';\nimport { RecordItemUpdateDTO } from './dto/record.item.update.dto';\nimport { RecordItemDisableDTO } from './dto/record.item.disable.dto';\n\n\nexport class RecordAPI {\n    public static getOrCreateRecord( data: RecordCreateDTO ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'post',\n            url: '/record/get-or-create',\n            data: data\n        } )\n    }\n\n    public static getRecordWithBlock( record_id: number ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'get',\n            url: `/record/with-block/${record_id}`\n        } )\n    }\n\n    public static getRecordItemsByRecordId( record_id: number ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'get',\n            url: `/record/record-item/${record_id}`\n        } )\n    }\n\n    public static createRecordItem( data: RecordItemCreateDTO ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'post',\n            url: `/record/record-item`,\n            data: data\n        } )\n    }\n\n    public static updateRecordItem( record_item_id: number, data: RecordItemUpdateDTO ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'patch',\n            url: `/record/record-item/${record_item_id}`,\n            data: data\n        } )\n    }\n\n    public static updateComplete( data: RecordItemCompleteDTO ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'patch',\n            url: '/record/record-item/complete',\n            data: data\n        } )\n    }\n\n    public static disableRecordItem( data: RecordItemDisableDTO ): Promise<AxiosResponse> {\n        return axios( {\n            method: 'patch',\n            url: '/record/record-item/disable',\n            data: data\n        } )\n    }\n}","import React, { Component } from 'react'\nimport {\n    Container,\n    Table,\n    Card,\n    Modal,\n    Form,\n    Button\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBurn, faPlusCircle, faChevronCircleRight } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { CalendarPropsInterface, CalendarStateInterface } from './calendar.interface'\nimport { LoginAPI } from '../../api/users/login.api'\nimport { RoutineAPI } from '../../api/routine/routine.api'\nimport { RecordAPI } from '../../api/record/record.api'\n\nimport './calendar.css'\nimport { RecordCreateDTO } from '../../api/record/dto/record.create.dto'\n\n\nclass Calendar extends Component<CalendarPropsInterface, CalendarStateInterface> {\n\n    constructor( props: CalendarPropsInterface ) {\n        super( props )\n\n        this.state = {\n            modal: false,\n            modal_title: '',\n            routine_id: null,\n            routine_date: '',\n            block_title: '',\n            nowDate: { year: 0, month: 0, date: 0 },\n            blocks: {}\n        }\n\n        this.getData = this.getData.bind( this )\n        this.handleChange = this.handleChange.bind( this )\n        this.handleModal = this.handleModal.bind( this )\n        this.handleCreateBlock = this.handleCreateBlock.bind( this )\n        this.handleSubmit = this.handleSubmit.bind( this )\n        this.handleCreateRecord = this.handleCreateRecord.bind( this )\n    }\n\n    private scrollRef = React.createRef<HTMLTableRowElement>()\n\n    componentDidMount() {\n        this.getData()\n    }\n\n    private week = [ '일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일' ]\n\n    async getData() {\n        // Set now date.\n        RoutineAPI.nowDate().then( ( { data } ) => {\n            this.setState( { nowDate: data } )\n        } )\n\n        // Get user profile.\n        LoginAPI.getProfile().then( ( { data } ) => {\n            // Set active routine id.\n            RoutineAPI.getActiveRoutine( data.email ).then( ( { data } ) => {\n                this.setState( { routine_id: data.ID } )\n\n                // Set routine blocks.\n                const getRoutineDates = RoutineAPI.getRoutineDates( data.ID )\n\n                getRoutineDates.then( response => {\n                    this.setState( { blocks: response.data } )\n                } )\n            } )\n        } )\n    }\n\n    async handleChange( e: React.ChangeEvent<HTMLInputElement> ) {\n        const { value } = e.target\n\n        this.setState( { block_title: value } )\n    }\n\n    async handleModal() {\n        const { modal } = this.state\n\n        this.setState( { modal: ! modal } )\n    }\n\n    async handleCreateBlock( e: React.MouseEvent<HTMLButtonElement> ) {\n        this.handleModal()\n\n        const date_string = e.currentTarget.dataset.date_string as string\n\n        const date = new Date( date_string )\n        const year = date.getFullYear()\n        const month = date.getMonth() + 1\n        const d = date.getDate()\n        const day = date.getDay()\n\n        this.setState( {\n            routine_date: date_string,\n            modal_title: `${year}년 ${month}월 ${d}일 ${this.week[ day ]}`\n        } )\n    }\n\n    /**\n     * Get or create record.\n     * @param block_id Block id\n     */\n    async handleCreateRecord( block_id: number ) {\n        LoginAPI.getProfile().then( ( { data } ) => {\n            const { ID } = data\n\n            const recordData: RecordCreateDTO = {\n                user_id: ID,\n                block_id: block_id\n            }\n\n            RecordAPI.getOrCreateRecord( recordData ).then( response => {\n                const { ID } = response.data\n\n                this.props.history.push( `/record/${ID}` )\n            } )\n        } )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        if ( this.state.routine_id ) {\n            const data = {\n                routine_id: this.state.routine_id,\n                routine_date: this.state.routine_date,\n                block_title: this.state.block_title\n            }\n            const response = RoutineAPI.createBlock( data )\n\n            response.then( ( { data } ) => {\n                this.props.history.push( `/create/exercise/${data.ID}` )\n            } ).catch( err => {\n                console.log( err )\n            } )\n        }\n\n        else alert( '잘못 된 접근입니다.')\n    }\n\n    render() {\n        const { year, month } = this.state.nowDate\n        const last_date = new Date( year, month, 0 ).getDate()\n\n        this.scrollRef.current?.scrollIntoView( true )\n\n        return (\n            <main className=\"main\">\n                <Container>\n\n                    <header className=\"calendar-header\">\n                        <h3>{ year }년 { month }월</h3>\n                    </header>\n\n                    <Card className=\"calendar-body\">\n                        <Card.Body className=\"no padding\">\n                            <Table className=\"calendar-table no margin\">\n                                <thead>\n                                    <tr>\n                                        <th className=\"calendar-th text align center\">날짜</th>\n                                        <th className=\"calendar-th \">내용</th>\n                                        <th className=\"calendar-th text align center\">기록</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { ( ( that ) => {\n                                        const rows = []\n                                        let i = 1\n                                        const { blocks } = that.state\n                                        const keys = Object.keys( blocks )\n                                        const today = new Date( Date.now() )\n\n                                        for ( i; i <= last_date; i += 1 ) {\n                                            const ymd = `${year}/${month}/${i}`\n\n                                            const day = new Date( ymd ).getDay()\n\n                                            const week = typeof that.week[ day ] === \"string\" ? that.week[ day ].charAt( 0 ) : \"\"\n\n                                            const is_today = `${today.getFullYear()}/${today.getMonth() + 1}/${today.getDate()}` === ymd ? 'today' : ''\n\n                                            const is_weekend = day === 0 || day === 6 ? 'weekend ' : ''\n\n                                            const key_index = keys.indexOf( ymd )\n\n                                            const isScrollRef = `${today.getFullYear()}/${today.getMonth() + 1}/${today.getDate()}` === ymd ?\n                                                                { ref: this.scrollRef } :\n                                                                ''\n\n                                            if ( key_index < 0 ) {\n                                                rows.push(\n                                                    <tr key={ i } { ...isScrollRef }>\n                                                        <td className={ \"vertical text align middle center td \" + is_weekend + is_today }>\n                                                            <span className={ 'day ' + is_weekend + is_today }>{ i }({ week })</span>\n                                                        </td>\n                                                        <td className={ \"vertical align middle td td \" + is_weekend + is_today }>\n                                                            <b className=\"no-record\">운동 기록이 없습니다.</b>\n                                                        </td>\n                                                        <td className={ \"vertical text align middle center td \" + is_weekend + is_today }>\n                                                            <Button variant=\"link\" className=\"no padding\" onClick={ that.handleCreateBlock } data-date_string={ ymd } title=\"운동기록 작성하기\">\n                                                                <FontAwesomeIcon icon={ faPlusCircle } />\n                                                            </Button>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }\n                                            // 운동 블럭이 있을 경우..\n                                            else {\n                                                const block = blocks[ ymd ]\n                                                \n                                                rows.push(\n                                                    <tr key={ i } { ...isScrollRef }>\n                                                        <td className={ \"vertical text align middle center td \" + is_weekend + is_today }>\n                                                            <span className={ 'day ' + is_weekend + is_today }>{ i }({ week })</span>\n                                                        </td>\n                                                        <td className={ \"vertical align middle td \" + is_weekend + is_today }>\n                                                            <FontAwesomeIcon icon={ faBurn } className={ block.record_id !== null ? \"active-burn\" : \"inactive-burn\"} />&nbsp;\n                                                            { block.block_title }\n                                                        </td>\n                                                        <td className={ \"vertical text align middle center td \" + is_weekend + is_today }>\n                                                            <Button variant=\"link\" className=\"no padding\" title=\"운동 기록하기\" onClick={ () => { that.handleCreateRecord( block.block_id ) } }>\n                                                                {/* <FontAwesomeIcon icon={faEdit} className={ block.record_id !== null ? \"success-edit\" : \"\"} /> */}\n                                                                <FontAwesomeIcon icon={faChevronCircleRight} className={ block.record_id !== null ? \"success-edit\" : \"\"} />\n                                                            </Button>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }\n                                        }\n\n                                        return rows\n                                    } )( this ) }\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                    </Card>\n\n                    <Modal show={ this.state.modal } onHide={ this.handleModal } animation={ true } centered>\n                        <Form onSubmit={ this.handleSubmit }>\n                            <Modal.Header closeButton>\n                                <Modal.Title>{ this.state.modal_title }</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"block_title\">블럭 제목</Form.Label>\n                                    <Form.Control type=\"text\" id=\"block_title\" name=\"block_title\" placeholder=\"블럭 제목 입력해주세요.\" onChange={ this.handleChange } value={ this.state.block_title } />\n                                </Form.Group>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={ this.handleModal }>닫기</Button>\n                                <Button variant=\"primary\" type=\"submit\">운동 종목 선택하기</Button>\n                            </Modal.Footer>\n                        </Form>\n                    </Modal>\n\n                </Container>\n            </main>\n        )\n    }\n\n}\n\nexport default Calendar","/* eslint no-useless-escape: 0 */\nimport React, { Component } from 'react'\nimport {\n    Container,\n    Form,\n    Button,\n    Alert\n} from 'react-bootstrap'\n\nimport './login.css'\n\nimport { LoginPropsInterface, LoginStateInterface } from './login.interface'\nimport { LoginDto } from '../../api/users/dto/login.dto'\nimport { LoginAPI } from '../../api/users/login.api'\nimport { storeDispatchContext, storeStateContext } from '../../store'\nimport { Redirect } from 'react-router'\n\n\nclass Login extends Component<LoginPropsInterface, LoginStateInterface> {\n\n    static contextType = storeDispatchContext\n\n    constructor( props: LoginPropsInterface ) {\n        super( props )\n\n        this.state = {\n            email: '',\n            password: '',\n            valid_email: true,\n            valid_password: true,\n            valid_login: true,\n            success: false\n        }\n\n        this.handleChange = this.handleChange.bind( this )\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n    \n\n    async handleChange( { currentTarget }: React.ChangeEvent<HTMLInputElement> ) {\n        const value = currentTarget.value\n        const name = currentTarget.name\n\n        if ( name === 'email' ) this.setState( { email: value } )\n        else if ( name === 'password' ) this.setState( { password: value } )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const email = this.state.email\n        const password = this.state.password\n\n        const regEmail = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\n\n        const validate = {\n            valid_email: false,\n            valid_password: false,\n            valid_login: true\n        }\n\n        if ( ! email || ! regEmail.test( email ) ) validate.valid_email = false\n        else validate.valid_email = true\n\n        if ( ! password ) validate.valid_password = false\n        else validate.valid_password = true\n\n        this.setState( validate )\n\n        // Success validate email and password.\n        if ( validate.valid_email && validate.valid_password ) {\n            // Response login api.\n            const userData: LoginDto = { email: this.state.email, password: this.state.password }\n            const loginResponse = LoginAPI.login( userData )\n\n            // Login response.\n            loginResponse.then( response => {\n                if ( response.status === 201 ) {\n                    this.setState( { valid_login: true, success: true } )\n\n                    // Set user state.\n                    this.context( { type: 'LOGIN' } )\n\n                    // Push calender component.\n                    this.props.history.push( '/' )\n                }\n                else this.setState( {\n                    valid_login: false,\n                    success: false\n                } )\n            } )\n            .catch( error => {\n                this.setState( {\n                    valid_login: false,\n                    success: false\n                } )\n            } )\n        }\n    }\n\n    render() {\n        const displayNone = { display: 'none' }\n        const displayBlock = { display: 'block' }\n\n        const is_alert = ! this.state.valid_email || ! this.state.valid_password ? false : true\n\n        const pathname = this.props.location_pathname !== '/login' ? this.props.location_pathname : '/'\n\n        return (\n            <storeStateContext.Consumer>\n                {\n                    ( store: any ) => {\n                        if ( ! store.user ) {\n                            return (\n                                <main className=\"form-signin\">\n                        \n                                    <Container>\n                                        <Alert variant=\"danger\" hidden={ is_alert } className=\"text align left\">\n                                            <div style={ this.state.valid_email ? displayNone : displayBlock }>이메일 양식에 맞게 입력해주세요.(예: example@gmail.com)</div>\n                                            <div style={ this.state.valid_password ? displayNone : displayBlock }>비밀번호를 입력해주세요.</div>\n                                        </Alert>\n\n                                        <Alert variant=\"danger\" hidden={ this.state.valid_login ? true : false } className=\"text align left\">\n                                            <div style={ this.state.valid_login ? displayNone : displayBlock }>이메일 또는 아이디가 틀립니다.</div>\n                                        </Alert>\n\n                                        <h3 className=\"h3 mb-3 fw-normal\">로그인 해주세요.</h3>\n\n                                        <Form onSubmit={ this.handleSubmit }>\n                                            <Form.Group>\n                                                <Form.Label htmlFor=\"email\" hidden>이메일</Form.Label>\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    placeholder=\"example@gmail.com\"\n                                                    title=\"이메일을 입력해주세요.\"\n                                                    id=\"email\"\n                                                    name=\"email\"\n                                                    className=\"login-form-top text align center\"\n                                                    size=\"lg\"\n                                                    onChange={ this.handleChange }\n                                                    value={ this.state.email }\n                                                />\n                                                <Form.Label htmlFor=\"password\" hidden>비밀번호</Form.Label>\n                                                <Form.Control\n                                                    type=\"password\"\n                                                    placeholder=\"비밀번호를 입력해주세요.\"\n                                                    title=\"비밀번호를 입력해주세요.\"\n                                                    id=\"password\"\n                                                    name=\"password\"\n                                                    className=\"login-form-bottom text align center\"\n                                                    size=\"lg\"\n                                                    onChange={ this.handleChange }\n                                                    value={ this.state.password }\n                                                />\n                                            </Form.Group>\n\n                                            <Form.Group>\n                                                <Button type=\"submit\" size=\"lg\" block>로그인</Button>\n                                            </Form.Group>\n\n                                        </Form>\n                                        \n                                    </Container>\n                                </main>\n                            )\n                        }\n                        else return <Redirect to={ pathname } />\n                    }\n                }\n            </storeStateContext.Consumer>\n        )\n    }\n}\n\nexport default Login","import React from 'react'\n\nimport {\n    Button,\n    Modal,\n    Form,\n    Col,\n    ButtonGroup,\n    ToggleButton,\n    InputGroup\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faAngleDown, faAngleUp } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { RecordAPI } from '../../api/record/record.api'\nimport { RecordItemUpdateDTO } from '../../api/record/dto/record.item.update.dto'\n\n\ninterface PropsInterface {\n    modal: boolean\n    setModal: any\n    record_id: number\n    data: any\n    updateEditData: ( update: any ) => void\n    updateExerciseData: ( update: any ) => void\n}\ninterface StateInterface {\n    weight_plate: number\n}\n\n\nclass RecordEditModal extends React.Component<PropsInterface, StateInterface> {\n\n    constructor( props: PropsInterface ) {\n        super( props )\n\n        this.state = {\n            weight_plate: 20,\n        }\n\n        this.handleChange = this.handleChange.bind( this )\n        this.handlePlateToggle = this.handlePlateToggle.bind( this )\n        this.handleIncrease = this.handleIncrease.bind( this )\n        this.validate = this.validate.bind( this )\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n\n    /**\n     * Validate form.\n     * @param target \n     * @returns \n     */\n    async validate( target: any ) {\n        const { name, value } = target\n        const update: any = {};\n\n        const negativeValid = ( value: number ) => {\n            return value < 0 ? 0 : value\n        }\n\n        switch( name ) {\n            case \"set_disable_range\":\n                update[ name ] = ! target.checked\n\n                break\n\n            case \"set_reps\":\n                if ( value >= this.props.data.set_max_reps ) update[ \"set_max_reps\" ] = Number( value ) + 1\n\n                update[ name ] = negativeValid( Number( value ) )\n\n                break\n\n            case \"set_max_reps\":\n                const max_value = Number( value ) <= 2 ? 2 : Number( value )\n                \n                if ( max_value <= this.props.data.set_reps ) update[ \"set_reps\" ] = max_value - 1\n\n                update[ name ] = max_value\n\n                break\n            \n            default:\n                const default_value = Number( value )\n\n                if ( ! isNaN( default_value ) )\n                    update[ name ] = negativeValid( default_value )\n\n                break\n        }\n\n        return update\n    }\n\n    /**\n     * Handle change event.\n     * @param e \n     */\n    async handleChange( e: React.ChangeEvent<HTMLInputElement> ) {\n        const update = await this.validate( e.target )\n\n        this.props.updateEditData( update )\n    }\n\n   /**\n    * Handle increment form.\n    * @param target \n    * @param increment \n    */ \n    async handleIncrease( target: string, increment: number ) {\n        const { updateEditData, data } = this.props\n\n        const value = data[ target ] + increment\n\n        const valid_update = await this.validate( { name: target, value: value } )\n\n        updateEditData( valid_update )\n    }\n\n    /**\n     * Toggle weight plate.\n     * @param e \n     */\n    async handlePlateToggle( e: React.ChangeEvent<HTMLInputElement> ) {\n        const { value } = e.target\n\n        this.setState( {\n            weight_plate: Number( value )\n        } )\n    }\n\n    /**\n     * Handle submit form component.\n     */\n    async handleSubmit() {\n        const { updateExerciseData, data } = this.props\n        const record_id = Number( this.props.record_id )\n\n        const { ID, record_item_id, exercise_id, set_number, set_weight, set_reps, set_max_reps, set_disable_range, set_rir } = data\n\n        const set_rest = ( data.set_rest_minute * 60 ) + data.set_rest_second\n\n        if ( typeof record_item_id === \"undefined\" ) {\n            const updateData = {\n                record_id: record_id,\n                set_id: ID,\n                record_item_number: set_number,\n                record_item_weight: set_weight,\n                record_item_reps: set_reps,\n                record_item_max_reps: set_max_reps,\n                record_item_disable_range: set_disable_range,\n                record_item_rir: set_rir,\n                record_item_rest: set_rest,\n                record_item_complete: false\n            }\n\n            RecordAPI.createRecordItem( updateData ).then( response => {\n                if ( response.status === 201 ) {\n                    updateExerciseData( {\n                        ID: ID,\n                        record_id: record_id,\n                        record_item_id: response.data.ID,\n                        exercise_id: exercise_id,\n                        set_number: set_number,\n                        set_weight: set_weight,\n                        set_reps: set_reps,\n                        set_max_reps: set_max_reps,\n                        set_disable_range: set_disable_range,\n                        set_rir: set_rir,\n                        set_rest: set_rest,\n                    } )\n                }\n            } )            \n        }\n\n        else {\n            const updateData: RecordItemUpdateDTO = {\n                record_item_weight: set_weight,\n                record_item_reps: set_reps,\n                record_item_max_reps: set_max_reps,\n                record_item_disable_range: set_disable_range,\n                record_item_rir: set_rir,\n                record_item_rest: set_rest\n            }\n\n            RecordAPI.updateRecordItem( record_item_id, updateData ).then( response => {\n                updateExerciseData( {\n                    ID: ID,\n                    record_id: record_id,\n                    record_item_id: record_item_id,\n                    exercise_id: exercise_id,\n                    set_number: set_number,\n                    set_weight: set_weight,\n                    set_reps: set_reps,\n                    set_max_reps: set_max_reps,\n                    set_disable_range: set_disable_range,\n                    set_rir: set_rir,\n                    set_rest: set_rest,\n                } )\n            } )\n        }\n\n    }\n\n\n    render() {\n        const { modal, setModal, data } = this.props\n\n        return (\n            <Modal show={ modal } onHide={ setModal } animation={ true } centered>\n                <Form>\n                    <Modal.Header closeButton>\n                        <Modal.Title>정지 벤치프레스 1세트 수정</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n                        {/* Weight */}\n                        <Form.Group>\n                            <Form.Label htmlFor=\"set_weight\">중량</Form.Label>\n\n                            <Form.Group className=\"weight-group\">\n                                <ButtonGroup toggle aria-label=\"증가할 중량\" className=\"weight-plate-group\">\n                                    {\n                                        [\n                                            { name: '2.5kg', value: 2.5, variant: 'light' },\n                                            { name: '5kg', value: 5, variant: 'light' },\n                                            { name: '10kg', value: 10, variant: 'success' },\n                                            { name: '15kg', value: 15, variant: 'warning' },\n                                            { name: '20kg', value: 20, variant: 'primary' },\n                                            { name: '25kg', value: 25, variant: 'danger' }\n                                        ]\n                                        .map( ( item, idx ) => {\n                                            return (\n                                                <ToggleButton key={ idx }\n                                                    type=\"radio\"\n                                                    size=\"sm\"\n                                                    variant={ item.variant }\n                                                    checked={ this.state.weight_plate === item.value }\n                                                    onChange={ this.handlePlateToggle }\n                                                    value={ item.value }\n                                                >\n                                                    {item.name}\n                                                </ToggleButton>\n                                            )\n                                        } )\n                                    }\n                                </ButtonGroup>\n                            </Form.Group>\n\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <Button type=\"button\" variant=\"outline-secondary\" title=\"감소\" onClick={ () => { this.handleIncrease( \"set_weight\", -1 * this.state.weight_plate ) } }>\n                                        <FontAwesomeIcon icon={ faAngleDown } />\n                                    </Button>\n                                </InputGroup.Prepend>\n\n                                <Form.Control\n                                    type=\"text\"\n                                    id=\"set_weight\"\n                                    name=\"set_weight\"\n                                    placeholder=\"중량을 입력해주세요.\"\n                                    onChange={ this.handleChange }\n                                    value={ data.set_weight }\n                                />\n\n                                <InputGroup.Append>\n                                    <Button type=\"button\" variant=\"outline-secondary\" title=\"증가\" onClick={ () => { this.handleIncrease( \"set_weight\", this.state.weight_plate ) } }>\n                                        <FontAwesomeIcon icon={ faAngleUp } />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Form.Group>\n\n                        {/* Reps */}\n                        <Form.Row>\n                            <Col xs={ 6 }>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"set_reps\">횟수</Form.Label>\n\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <Button type=\"button\" variant=\"outline-secondary\" title=\"감소\" onClick={ () => { this.handleIncrease( \"set_reps\", -1 ) } }>\n                                                <FontAwesomeIcon icon={ faAngleDown } />\n                                            </Button>\n                                        </InputGroup.Prepend>\n\n                                        <Form.Control\n                                            type=\"text\"\n                                            id=\"set_reps\"\n                                            name=\"set_reps\"\n                                            placeholder=\"횟수를 입력해주세요.\"\n                                            onChange={ this.handleChange }\n                                            value={ data.set_reps }\n                                        />\n\n                                        <InputGroup.Append>\n                                            <Button type=\"button\" variant=\"outline-secondary\" title=\"증가\" onClick={ () => { this.handleIncrease( \"set_reps\", 1 ) } }>\n                                                <FontAwesomeIcon icon={ faAngleUp } />\n                                            </Button>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Form.Group>\n                            </Col>\n\n                            <Col xs={ 6 }>\n                                <Form.Group>\n                                    <Form.Label htmlFor=\"set_max_reps\">최대 횟수</Form.Label>\n\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <Button type=\"button\" variant=\"outline-secondary\" title=\"감소\" onClick={ () => { this.handleIncrease( \"set_max_reps\", -1 ) } } disabled={ data.set_disable_range }>\n                                                <FontAwesomeIcon icon={ faAngleDown } />                                                    \n                                            </Button>\n                                        </InputGroup.Prepend>\n\n                                        <Form.Control\n                                            type=\"text\"\n                                            id=\"set_max_reps\"\n                                            name=\"set_max_reps\"\n                                            placeholder=\"횟수를 입력해주세요.\"\n                                            onChange={ this.handleChange }\n                                            value={ data.set_max_reps }\n                                            disabled={ data.set_disable_range }\n                                        />\n\n                                        <InputGroup.Append>\n                                            <Button type=\"button\" variant=\"outline-secondary\" title=\"증가\" onClick={ () => { this.handleIncrease( \"set_max_reps\", 1 ) } } disabled={ data.set_disable_range }>\n                                                <FontAwesomeIcon icon={ faAngleUp } />                                                    \n                                            </Button>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n\n                                    <Form.Check\n                                        type=\"checkbox\"\n                                        name=\"set_disable_range\"\n                                        id=\"set_disable_range\"\n                                        className=\"label-checkbox\"\n                                        onChange={ this.handleChange }\n                                        checked={ ! data.set_disable_range ? true : false }\n                                    />\n                                    <label htmlFor=\"set_disable_range\" className=\"label-text\">최대 횟수 사용</label>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n\n                        <Form.Group>\n                            <Form.Label htmlFor=\"set_rir\">RIR</Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                name=\"set_rir\"\n                                id=\"set_rir\"\n                                onChange={ this.handleChange }\n                                value={ data.set_rir }\n                            >\n                                {\n                                    [ ...Array( 11 ) ].map( ( v, i ) => {\n                                        return <option value={ i } key={ i }>{ i }</option>\n                                    } )\n                                }\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor=\"set_rest\">쉬는시간</Form.Label>\n\n                            <Form.Row>\n                                <Col xs={ 4 }>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <Button\n                                                variant=\"outline-secondary\"\n                                                title=\"감소\"\n                                                onClick={ () => { this.handleIncrease( \"set_rest_minute\", -1 ) } }\n                                            >\n                                                <FontAwesomeIcon icon={ faAngleDown } />\n                                            </Button>\n                                        </InputGroup.Prepend>\n\n                                        <Form.Control\n                                            type=\"text\"\n                                            name=\"set_rest_minute\"\n                                            id=\"set_rest_minute\"\n                                            onChange={ this.handleChange }\n                                            value={ data.set_rest_minute }\n                                        />\n\n                                        <InputGroup.Append>\n                                            <Button\n                                                variant=\"outline-secondary\"\n                                                title=\"증가\"\n                                                onClick={ () => { this.handleIncrease( \"set_rest_minute\", 1 ) } }\n                                            >\n                                                <FontAwesomeIcon icon={ faAngleUp } />\n                                            </Button>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Col>\n\n                                <Form.Label htmlFor=\"rest_minute\" column xs={ 1 }>분</Form.Label>\n\n                                <Col xs={ 4 }>\n                                    <Form.Control\n                                        as=\"select\"\n                                        name=\"set_rest_second\"\n                                        id=\"set_rest_second\"\n                                        onChange={ this.handleChange }\n                                        value={ data.set_rest_second }\n                                    >\n                                        {\n                                            [ ...Array( 60 ) ].map( ( v, i ) => {\n                                                return <option value={ i } key={ i }>{ i }</option>\n                                            } )\n                                        }\n                                    </Form.Control>\n                                </Col>\n\n                                <Form.Label htmlFor=\"rest_second\" column xs={ 1 }>초</Form.Label>\n                            </Form.Row>\n\n                        </Form.Group>\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={ () => { setModal( false ) } }>닫기</Button>\n                        <Button\n                            variant=\"primary\"\n                            onClick={\n                                () => {\n                                    setModal( false )\n                                    this.handleSubmit()\n                                }\n                            }\n                        >저장</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default RecordEditModal","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {\n    Container,\n    Table,\n    Button,\n    Form,\n    Card,\n    Col,\n    Row\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBurn, faEdit, faBan, faDumbbell } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { useParams } from 'react-router-dom'\nimport { RecordAPI } from '../../api/record/record.api'\n\nimport './record.css'\nimport RecordEditModal from './RecordEditModal'\nimport { RecordItemCompleteDTO } from '../../api/record/dto/record.item.complete.dto'\n\n\nfunction Record() {\n    const history = useHistory()\n    const { record_id }: any = useParams()\n\n    const [ modal, setModal ] = useState( false )\n    const [ blockId, setBlockId ] = useState( -1 )\n    const [ title, setTitle ] = useState( '' )\n    const [ routineDate, setRoutineDate ] = useState( '...' )\n\n    // Exercises data\n    const [ data, setData ] = useState<any[]>( [] )\n    const [ complete, setComplete ] = useState<number[]>( [] )\n\n    const [ editData, setEditData ] = useState<any>( {\n        ID: -1,\n        record_item_id: -1,\n        exercise_id: -1,\n        set_number: 0,\n        weight: 0,\n        reps: 0,\n        max_reps: 0,\n        rir: 0,\n        rest_minute: 0,\n        rest_second: 0,\n    } )\n\n\n    // Use effect..\n    useEffect( () => {\n\n        RecordAPI.getRecordWithBlock( record_id ).then( response => {\n            const {\n                block_block_title,\n                date_routine_date,\n                exercises,\n                block_ID\n            } = response.data\n\n            setBlockId( block_ID )\n\n            setRoutineDate( date_routine_date )\n            setTitle( block_block_title )\n\n            // Get record item and update sets in data..\n            RecordAPI.getRecordItemsByRecordId( record_id ).then( response => {\n                const { data } = response\n                const recordCompleteArr: number[] = []\n\n                // Exercises data\n                const updateExercises = exercises.map( ( exercise: any ) => {\n                    // Sets in exercise data\n                    const updateSets = exercise.sets.map( ( set: any ) => {\n                        let updateSet = set\n\n                        // Record item data\n                        data.forEach( ( item: any ) => {\n                            const set_id = Number( item.set_id )\n\n                            if ( set_id === updateSet.ID ) {\n                                // Record item data\n                                const {\n                                    ID,\n                                    set_id,\n                                    record_id,\n                                    record_item_disable_range,\n                                    record_item_number,\n                                    record_item_max_reps,\n                                    record_item_reps,\n                                    record_item_rest,\n                                    record_item_rir,\n                                    record_item_weight,\n                                    record_item_complete,\n                                    record_item_set_disable,\n                                } = item\n\n                                // Block set data\n                                const {\n                                    exercise_id,\n                                } = updateSet\n\n                                // Rendering data\n                                updateSet = {\n                                    ID: Number( set_id ),\n                                    exercise_id: exercise_id,\n                                    set_disable_range: record_item_disable_range,\n                                    set_number: record_item_number,\n                                    set_max_reps: record_item_max_reps,\n                                    set_reps: record_item_reps,\n                                    set_rest: record_item_rest,\n                                    set_rir: record_item_rir,\n                                    set_weight: record_item_weight,\n                                    record_id: Number( record_id ),\n                                    record_item_id: Number( ID ),\n                                    record_item_complete: record_item_complete,\n                                    record_item_set_disable: record_item_set_disable,\n                                }\n\n                                // Complete record..\n                                if ( record_item_complete ) recordCompleteArr.push( Number( set_id ) )\n                            }\n                        } )\n\n                        return updateSet\n                    } )\n\n                    return {\n                        ...exercise,\n                        sets: updateSets\n                    }\n                } )\n\n                // Set exercises.\n                setData( updateExercises )\n                setComplete( recordCompleteArr )\n            } )\n        } )\n\n    }, [ record_id ] )\n\n\n    /**\n     * Open edit modal popover.\n     * @param data \n     */\n    const handleEdit = ( data: any ) => {\n        setModal( true )\n\n        const { ID, record_id, record_item_id, exercise_id, set_number, set_weight, set_reps, set_max_reps, set_disable_range, set_rir, set_rest } = data\n\n        const set_rest_minute = Math.floor( set_rest / 60 )\n        const set_rest_second = set_rest - ( set_rest_minute * 60 )\n\n        setEditData( {\n            ID: ID,\n            record_id: record_id,\n            record_item_id: record_item_id,\n            exercise_id: exercise_id,\n            set_number: set_number,\n            set_weight: Number( set_weight ),\n            set_reps: set_reps,\n            set_max_reps: set_max_reps,\n            set_disable_range: set_disable_range,\n            set_rir: set_rir,\n            set_rest_minute: set_rest_minute,\n            set_rest_second: set_rest_second\n        } )\n    }\n\n    /**\n     * Check complete\n     * @param e \n     * @param set_id \n     */\n    const handleComplete = ( e: React.ChangeEvent<HTMLInputElement>, set_id: number ) => {\n        const { value, checked } = e.target\n\n        const data: RecordItemCompleteDTO = {\n            record_id,\n            set_id,\n            complete: checked\n        }\n\n        RecordAPI.updateComplete( data ).then( response => {\n            if ( response.status === 200 ) {\n\n                if ( checked ) setComplete( [ ...complete, Number( value ) ] )\n\n                else {\n                    const index = complete.indexOf( Number( value ) )\n        \n                    complete.splice( index, 1 )\n        \n                    setComplete( [ ...complete ] )\n                }\n            }\n        } )\n    }\n\n    const updateEditData = ( update: any ) => {\n        setEditData( {\n            ...editData,\n            ...update\n        } )\n    };\n\n    const updateExerciseData = ( update: any ) => {\n        const updateData = data.map( ( exercise: any ) => {\n            if ( exercise.ID === update.exercise_id ) {\n                const sets = exercise.sets.map( ( set: any ) => set.ID === update.ID ? { ...set, ...update } : set )\n\n                return {\n                    ...exercise,\n                    sets: sets\n                }\n            }\n            else return exercise\n        } )\n\n        setData( updateData )\n    }\n\n    const handleRemoveSet = ( exercise_id: number, set_id: number ) => {\n        const disableRecordItemData = {\n            record_id: record_id,\n            set_id: set_id,\n            disable: true\n        }\n\n        RecordAPI.disableRecordItem( disableRecordItemData ).then( response => {\n\n            if ( response.status === 200 ) {\n\n                const exercises = data.map( ( row ) => {\n\n                    if ( exercise_id === row.ID ) {\n\n                        const sets = row.sets.map( ( set: any ) => {\n                            return set.ID !== set_id ? set : { ...set, record_item_set_disable: 1 }\n                        } )\n\n                        return { ...row, sets: sets }\n                    }\n                    else {\n                        return row\n                    }\n                } )\n\n                setData( exercises )\n            }\n        } )\n    }\n\n\n    return (\n        <>\n            {/* <div className=\"record-date\">\n                <Container>\n                    <p className=\"record-date-link\">\n                    </p>\n                </Container>\n            </div> */}\n\n            <main className=\"main record-main\">\n                <div className=\"record-title\">\n                    <Container>\n                        <Row>\n                            <Col xs={7}>\n                                <h2 className=\"record-date-title\">\n                                    <strong>(토)</strong><span>{ title }</span>\n                                </h2>\n                                <p className=\"record-date-desc\">\n                                    {\n                                        ( ( date ) => {\n                                            const split = date.split( '/' )\n\n                                            return `${split[ 0 ]}년 ${split[ 1 ]}월 ${split[ 2 ]}일`\n                                        } )( routineDate )\n                                    }\n                                </p>\n                            </Col>\n                            <Col xs={5} style={{ textAlign: 'right' }}>\n                                <Button variant=\"warning\" onClick={ () => {\n                                    history.push( `/create/exercise/${blockId}` )\n                                } } className=\"icon-button\">\n                                    <FontAwesomeIcon icon={faDumbbell} className=\"button-icon\" />\n                                    운동 목표 수정\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n\n                <Container>\n                    { data.map( ( item, index ) => {\n                        return (\n                            <Card className=\"record-item\" key={ index }>\n                                <Card.Header>\n                                    <div className=\"record-item-header\">\n                                        <h4 className=\"create-exercise-header no margin\">\n                                            <FontAwesomeIcon icon={faBurn} style={{color: '#dc3545'}} />&nbsp;&nbsp;\n                                            { item.exercise_name }\n                                        </h4>\n                                    </div>\n                                </Card.Header>\n\n                                <Card.Body className=\"no padding\">\n                                    <Table className=\"record-item-table no margin text align center\">\n                                        <tbody>\n                                            { item.sets.map( ( set: any, set_index: number ) => {\n                                                const is_complete = complete.indexOf( set.ID ) < 0\n                                                const completeClass = is_complete ? '' : 'record-item-complete-set'\n\n                                                const { record_item_set_disable } = set\n\n                                                if ( typeof record_item_set_disable === \"number\" && record_item_set_disable ) {\n                                                    return null\n                                                }\n                                                else {\n                                                    return (\n                                                        <tr key={ set_index } className={ completeClass }>\n                                                            <td className=\"vertical align middle\">\n                                                                <div className=\"vertical align middle display inline block\">\n                                                                    <Form.Check\n                                                                        type=\"checkbox\"\n                                                                        name=\"complete\"\n                                                                        id={ `complete-${set.ID}` }\n                                                                        onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => handleComplete( e, set.ID ) }\n                                                                        value={ set.ID }\n                                                                        checked={ ! is_complete }\n                                                                    />\n                                                                </div>\n                                                                {/*\n                                                                &nbsp;\n                                                                <div className=\"record-item-set-title vertical align middle display inline block\">\n                                                                    <Form.Label htmlFor={ `complete-${set.ID}` } className=\"no margin\">\n                                                                        { set.set_number }세트\n                                                                    </Form.Label>\n                                                                </div>\n                                                                */}\n                                                            </td>\n                                                            <td className=\"vertical align middle\">{ Number( set.set_weight ) }kg</td>\n                                                            <td className=\"vertical align middle\">{ set.set_reps }{ set.set_disable_range ? '' : `~${set.set_max_reps}` }회</td>\n                                                            <td className=\"vertical align middle\">{ set.set_rir }R</td>\n                                                            <td className=\"vertical align middle\">\n                                                                { ( ( rest ) => {\n                                                                    const minute = Math.floor( rest / 60 )\n                                                                    const second = rest - ( minute * 60 )\n\n                                                                    return `${minute}.${second}`\n                                                                } )( set.set_rest ) }초\n                                                            </td>\n                                                            <td className=\"vertical align middle\" width=\"1\">\n                                                                <Button variant=\"link\" title=\"수정하기\" onClick={ () => { handleEdit( set ) } }>\n                                                                    <FontAwesomeIcon icon={faEdit} />\n                                                                </Button>\n                                                            </td>\n                                                            <td className=\"vertical align middle set-td last-td\" width=\"1\">\n                                                                <Button variant=\"link\" onClick={ () => { handleRemoveSet( item.ID, set.ID ) } }>\n                                                                    <FontAwesomeIcon icon={faBan} style={{ color: '#dc3545' }} />\n                                                                </Button>\n                                                            </td>\n                                                        </tr>\n                                                    )\n                                                }\n                                            } ) }\n                                        </tbody>\n                                    </Table>\n                                </Card.Body>\n                            </Card>\n                        )\n                    } ) }\n                </Container>\n\n                <RecordEditModal\n                    modal={ modal }\n                    setModal={ setModal }\n                    record_id={ record_id }\n                    data={ editData }\n                    updateEditData={ updateEditData }\n                    updateExerciseData={ updateExerciseData }\n                />\n            </main>\n        </>\n    )\n}\n\nexport default Record","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n    faAngleDown,\n    faAngleUp\n} from \"@fortawesome/free-solid-svg-icons\"\nimport {\n    InputGroup,\n    Form,\n    Button,\n    Col,\n    ButtonGroup,\n    ToggleButton\n} from 'react-bootstrap'\n\n\ninterface CreateEditSetPropsInterface {\n    parent: any\n    prefix: string\n}\n\ninterface CreateEditSetStateInterface {}\n\n\nclass CreateEditSet extends Component<CreateEditSetPropsInterface, CreateEditSetStateInterface> {\n\n    constructor( props: CreateEditSetPropsInterface ) {\n        super( props )\n\n        this.state = {}\n    }\n\n    render() {\n        const { parent, prefix } = this.props\n\n        return (\n            <>\n                <Form.Row>\n                    <Col xs={ 6 }>\n                        <Form.Group>\n                            <Form.Label htmlFor={ `${prefix}set_reps` }>횟수</Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"감소\"\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_reps`, -1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleDown } />\n                                    </Button>\n                                </InputGroup.Prepend>\n\n                                <Form.Control type=\"text\"\n                                    id={ `${prefix}set_reps` }\n                                    name={ `${prefix}set_reps` }\n                                    onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, prefix ) }\n                                    value={ parent.state[ `${prefix}set_reps` ] }\n                                />\n\n                                <InputGroup.Append>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"증가\"\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_reps`, 1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleUp } />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Form.Group>\n                    </Col>\n\n                    <Col xs={ 6 }>\n                        <Form.Group>\n                            <Form.Label htmlFor={ `${prefix}edit_set_max_reps` }>최대 횟수</Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"감소\"\n                                        disabled={ parent.state[ `${prefix}set_disable_range` ] }\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_max_reps`, -1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleDown } />\n                                    </Button>\n                                </InputGroup.Prepend>\n\n                                <Form.Control\n                                    type=\"text\"\n                                    id={ `${prefix}set_max_reps` }\n                                    name={ `${prefix}set_max_reps` }\n                                    disabled={ parent.state[ `${prefix}set_disable_range` ] }\n                                    onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, prefix ) }\n                                    value={ parent.state[ `${prefix}set_max_reps` ] }\n                                />\n\n                                <InputGroup.Append>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"증가\"\n                                        disabled={ parent.state[ `${prefix}set_disable_range` ] }\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_max_reps`, 1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleUp } />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n\n                            <Form.Check\n                                type=\"checkbox\"\n                                name={ `${prefix}set_disable_range` }\n                                id={ `${prefix}set_disable_range` }\n                                className=\"label-checkbox\"\n                                onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleRange( e, prefix ) }\n                                checked={ ! parent.state[ `${prefix}set_disable_range` ] }\n                            />\n                            <label htmlFor={ `${prefix}set_disable_range` } className=\"label-text\">최대 횟수 사용</label>\n                        </Form.Group>\n                    </Col>\n                </Form.Row>\n\n                <Form.Group>\n                    <Form.Label htmlFor={ `${prefix}set_weight` }>중량</Form.Label>\n                    <Form.Group className=\"weight-group\">\n                        <ButtonGroup toggle aria-label=\"증가할 중량\" className=\"weight-plate-group\">\n                            {\n                                [\n                                    { name: '2.5kg', value: 2.5, variant: 'light' },\n                                    { name: '5kg', value: 5, variant: 'light' },\n                                    { name: '10kg', value: 10, variant: 'success' },\n                                    { name: '15kg', value: 15, variant: 'warning' },\n                                    { name: '20kg', value: 20, variant: 'primary' },\n                                    { name: '25kg', value: 25, variant: 'danger' }\n                                ]\n                                .map( ( item, idx ) => {\n                                    return (\n                                        <ToggleButton key={ idx }\n                                            type=\"radio\"\n                                            size=\"sm\"\n                                            variant={ item.variant }\n                                            checked={ parent.state.weight_plate === item.value }\n                                            onChange={ parent.handlePlateToggle }\n                                            value={ item.value }\n                                        >\n                                            {item.name}\n                                        </ToggleButton>\n                                    )\n                                } )\n                            }\n                        </ButtonGroup>\n                    </Form.Group>\n\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                            <Button\n                                variant=\"outline-secondary\"\n                                title=\"감소\"\n                                onClick={ () => parent.handleIncreaseWeight( -1, prefix ) }\n                            >\n                                <FontAwesomeIcon icon={faAngleDown} />\n                            </Button>\n                        </InputGroup.Prepend>\n\n                        <Form.Control\n                            type=\"text\"\n                            name={ `${prefix}set_weight` }\n                            id={ `${prefix}set_weight` }\n                            placeholder=\"중량을 입력해주세요.\"\n                            onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, prefix ) }\n                            value={ parent.state[ `${prefix}set_weight` ] }\n                        />\n\n                        <InputGroup.Append>\n                            <Button\n                                variant=\"outline-secondary\"\n                                title=\"증가\"\n                                onClick={ () => parent.handleIncreaseWeight( 1, prefix ) }\n                            >\n                                <FontAwesomeIcon icon={faAngleUp} />\n                            </Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor={ `${prefix}set_rir` }>RIR</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        name={ `${prefix}set_rir` }\n                        id={ `${prefix}set_rir` }\n                        onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, prefix ) }\n                        value={ parent.state[ `${prefix}set_rir` ] }\n                    >\n                        <option value={0}>0</option>\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                        <option value={7}>7</option>\n                        <option value={8}>8</option>\n                        <option value={9}>9</option>\n                        <option value={10}>10</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor={ `${prefix}set_rest_minute` }>휴식 시간</Form.Label>\n\n                    <Form.Row>\n                        <Col xs={ 4 }>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"감소\"\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_rest_minute`, -1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleDown } />\n                                    </Button>\n                                </InputGroup.Prepend>\n\n                                <Form.Control\n                                    type=\"text\"\n                                    name={ `${prefix}set_rest_minute` }\n                                    id={ `${prefix}set_rest_minute` }\n                                    onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleRange( e, prefix ) }\n                                    value={ parent.state[ `${prefix}set_rest_minute` ] }\n                                />\n\n                                <InputGroup.Append>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        title=\"증가\"\n                                        onClick={ () => parent.handleIncrement( `${prefix}set_rest_minute`, 1, prefix ) }\n                                    >\n                                        <FontAwesomeIcon icon={ faAngleUp } />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Col>\n\n                        <Form.Label htmlFor=\"rest_minute\" column xs={ 1 }>분</Form.Label>\n\n                        <Col xs={ 4 }>\n                            <Form.Control\n                                as=\"select\"\n                                name={ `${prefix}set_rest_second` }\n                                id={ `${prefix}set_rest_second` }\n                                onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, prefix ) }\n                                value={ parent.state[ `${prefix}set_rest_second` ] }\n                                >\n                                {\n                                    [ ...Array( 60 ) ].map( ( v, i ) => {\n                                        return <option value={ i } key={ i }>{ i }</option>\n                                    } )\n                                }\n                            </Form.Control>\n                        </Col>\n\n                        <Form.Label htmlFor=\"rest_second\" column xs={ 1 }>초</Form.Label>\n                    </Form.Row>\n                </Form.Group>\n            </>\n        )\n    }\n}\n\nexport default CreateEditSet","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBurn } from \"@fortawesome/free-solid-svg-icons\"\nimport {\n    Modal,\n    Form,\n    Button\n} from 'react-bootstrap'\n\nimport CreateEditSet from './CreateEditSet'\nimport { RoutineAPI } from '../../api/routine/routine.api'\nimport { RoutineUpdateSetDTO } from '../../api/routine/dto/routine.update.set.dto'\n\n\ninterface CreateEditSetModalPropsInterface {\n    parent: any\n    prefix: string\n}\n\ninterface CreateEditSetModalStateInterface {}\n\n\nclass CreateEditSetModal extends Component<CreateEditSetModalPropsInterface, CreateEditSetModalStateInterface> {\n\n    constructor( props: CreateEditSetModalPropsInterface ) {\n        super( props )\n\n        this.state = {}\n\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const { parent } = this.props\n        const {\n            edit_ID,\n            edit_exercise_id,\n            edit_set_reps,\n            edit_set_max_reps,\n            edit_set_disable_range,\n            edit_set_weight,\n            edit_set_rir,\n            edit_set_rest_minute,\n            edit_set_rest_second\n        } = parent.state\n        const edit_set_rest = edit_set_rest_minute * 60 + edit_set_rest_second\n\n        const data: RoutineUpdateSetDTO = {\n            ID: edit_ID,\n            exercise_id: edit_exercise_id,\n            set_reps: edit_set_reps,\n            set_max_reps: edit_set_max_reps,\n            set_disable_range: edit_set_disable_range,\n            set_weight: edit_set_weight,\n            set_rir: edit_set_rir,\n            set_rest: edit_set_rest\n        }\n\n        const response = RoutineAPI.updateExerciseSet( data )\n\n        response.then( ( { data } ) => {\n            if ( data.raw.serverStatus === 2 ) {\n                RoutineAPI.getExercises( parent.state.block_id )\n                    .then( ( { data } ) => {\n                        parent.setState( {\n                            exerciseData: data,\n                            edit_set_modal: false\n                        } )\n                    } )\n            }\n        } )\n    }\n\n    render() {\n        const { parent, prefix } = this.props\n\n        return (\n            <Modal size=\"lg\" show={ parent.state.edit_set_modal } onHide={ parent.handleEditSetModal } centered>\n                <Form onSubmit={ this.handleSubmit }>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FontAwesomeIcon icon={ faBurn } />&nbsp;\n                            \"{parent.state.edit_exercise_name}\" {parent.state.edit_set_number}세트 수정\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n                        <CreateEditSet parent={ parent } prefix={ prefix } />\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" type=\"button\" size=\"lg\" onClick={ parent.handleEditSetModal }>닫기</Button>\n                        <Button type=\"submit\" size=\"lg\">수정하기</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default CreateEditSetModal","import React, { Component } from 'react'\nimport {\n    Form,\n    InputGroup,\n    Button,\n    Modal\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n    faAngleDown,\n    faAngleUp\n} from \"@fortawesome/free-solid-svg-icons\"\n\nimport CreateEditSet from './CreateEditSet'\nimport { RoutineExerciseDTO } from '../../api/routine/dto/routine.exercise.dto'\nimport { RoutineAPI } from '../../api/routine/routine.api'\n\nimport './create.css'\n\n\ninterface CreateExerciseModalPropsInterface {\n    parent: any\n    prefix: string\n}\ninterface CreateExerciseModalStateInterface {}\n\n\nclass CreateExerciseModal extends Component<CreateExerciseModalPropsInterface, CreateExerciseModalStateInterface> {\n\n    constructor( props: CreateExerciseModalPropsInterface ) {\n        super( props )\n\n        this.state = {}\n\n        /** Bind events. */\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n    /**\n     * Request api to save exercise data\n     * and get response data to exercises data.\n     * @param e Form event.\n     */\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const { parent } = this.props\n\n        // Valid exercise name.\n        const ref = parent.exerciseRef.current\n        if ( ! parent.state.exercise_name ) ref.style.border = '1px solid #dc3545'\n\n        else {\n            const {\n                block_id,\n                exercise_name,\n                set_number,\n                set_weight,\n                set_reps,\n                set_max_reps,\n                set_disable_range,\n                set_rir,\n                set_rest_minute,\n                set_rest_second } = parent.state\n            const set_rest = set_rest_minute * 60 + set_rest_second\n\n            const data: RoutineExerciseDTO = {\n                block_id: block_id,\n                exercise_name: exercise_name,\n                set_number: set_number,\n                set_weight: set_weight,\n                set_reps: set_reps,\n                set_max_reps: set_max_reps,\n                set_disable_range: set_disable_range,\n                set_rir: set_rir,\n                set_rest: set_rest\n            }\n            // Create exercise and sets.\n            await RoutineAPI.createExercise( data )\n\n            // Reload exercise and sets.\n            await RoutineAPI.getExercises( block_id )\n                .then( ( { data } ) => {\n                    parent.setState( {\n                        exerciseData: data,\n                        create_modal: false,\n                        exercise_name: '',\n                        weight: 0,\n                        rir: 0\n                    } )\n                } )\n        }\n    }\n\n    render() {\n        const { parent, prefix } = this.props\n\n        return (\n            <Modal size=\"lg\" show={parent.state.create_modal} onHide={ parent.handleCreateModal } centered>\n                <Form onSubmit={ this.handleSubmit }>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>운동 일정 작성</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form.Group>\n                            <Form.Label htmlFor=\"exercise_name\">종목</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"exercise_name\"\n                                id=\"exercise_name\"\n                                placeholder=\"종목을 입력해주세요.\"\n                                onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, '' ) }\n                                // value={ this.state.exercise_name }\n                                ref={ parent.exerciseRef }\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label htmlFor=\"set_number\">세트</Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <Button variant=\"outline-secondary\" title=\"감소\" onClick={ () => parent.handleIncrement( 'set_number', -1 ) }><FontAwesomeIcon icon={ faAngleDown } /></Button>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"text\" name=\"set_number\" id=\"set_number\" placeholder=\"세트\" onChange={ ( e: React.ChangeEvent<HTMLInputElement> ) => parent.handleForm( e, '' ) } value={ parent.state.set_number } />\n                                <InputGroup.Append>\n                                    <Button variant=\"outline-secondary\" title=\"증가\" onClick={ () => parent.handleIncrement( 'set_number', 1 ) }><FontAwesomeIcon icon={ faAngleUp } /></Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Form.Group>\n\n                        <CreateEditSet parent={ parent } prefix={ prefix } />\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"primary\" type=\"submit\" size=\"lg\" className=\"create-submit-btn\">저장</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default CreateExerciseModal","import React, { Component } from 'react'\nimport {\n    Modal,\n    Button\n} from 'react-bootstrap'\n\nimport { RoutineAPI } from '../../api/routine/routine.api'\n\ninterface RemoveExercisePropsInterface {\n    parent: any\n}\ninterface RemoveExerciseStateInterface {}\n\n\nclass CreateRemoveExerciseModal extends Component<RemoveExercisePropsInterface, RemoveExerciseStateInterface> {\n\n    constructor( props: RemoveExercisePropsInterface ) {\n        super( props )\n\n        this.state = {}\n\n        this.handleRemoveExerciseSubmit = this.handleRemoveExerciseSubmit.bind( this )\n    }\n\n    /**\n     * Handle remove exercise submit.\n     */\n    async handleRemoveExerciseSubmit() {\n        const { parent } = this.props\n\n        parent.handleRemoveExerciseModal()\n\n        const remove_exercise_id = parent.state.remove_exercise_id as number\n        const response = RoutineAPI.removeExercise( remove_exercise_id )\n\n        response.then( ( { data } ) => {\n            if ( data.raw.serverStatus === 2 ) {\n                RoutineAPI.getExercises( parent.state.block_id )\n                    .then( ( { data } ) => {\n                        parent.setState( {\n                            exerciseData: data\n                        } )\n                    } )\n            }\n        } )\n    }\n\n    render() {\n        const { parent } = this.props\n\n        return (\n            <Modal size=\"lg\" show={ parent.state.remove_exercise_modal } onHide={ parent.handleRemoveExerciseModal } centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>운동 종목 삭제</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body style={ { fontSize: 16 } }>\n                    \"{ parent.state.remove_exercise_name }\" 종목을 삭제 하시겠습니까?\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" type=\"button\" size=\"lg\" onClick={ parent.handleRemoveExerciseModal }>아니오</Button>\n                    <Button variant=\"danger\" type=\"button\" size=\"lg\" onClick={ this.handleRemoveExerciseSubmit }>삭제</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\nexport default CreateRemoveExerciseModal","import React, { Component } from 'react'\nimport {\n    Modal,\n    Form,\n    Button\n} from 'react-bootstrap'\nimport { RoutineCreateSetDTO } from '../../api/routine/dto/routine.create.set.dto'\nimport { RoutineAPI } from '../../api/routine/routine.api'\nimport CreateEditSet from './CreateEditSet'\n\n\ninterface SetModalPropsInterface {\n    modal: boolean\n    handleModal: any,\n    parent: any\n}\ninterface SetModalStateInterface {}\n\n\nclass CreateSetModal extends Component<SetModalPropsInterface, SetModalStateInterface> {\n\n    constructor( props: SetModalPropsInterface ) {\n        super( props )\n\n        this.state = {}\n\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const { parent } = this.props\n\n        const {\n            create_set_exercise_id,\n            create_set_weight,\n            create_set_reps,\n            create_set_max_reps,\n            create_set_disable_range,\n            create_set_rir,\n            create_set_rest_minute,\n            create_set_rest_second\n        } = parent.state\n        const create_set_rest = create_set_rest_minute * 60 + create_set_rest_second\n\n        const data: RoutineCreateSetDTO = {\n            exercise_id: create_set_exercise_id,\n            set_weight: create_set_weight,\n            set_reps: create_set_reps,\n            set_max_reps: create_set_max_reps,\n            set_disable_range: create_set_disable_range,\n            set_rir: create_set_rir,\n            set_rest: create_set_rest\n        }\n        \n        const response = RoutineAPI.createExerciseSet( data )\n\n        response.then( ( { data } ) => {\n            if ( data.statusCode === 500 ) return\n\n            RoutineAPI.getExercises( parent.state.block_id )\n                .then( ( { data } ) => {\n                    // Close modal.\n                    this.props.handleModal()\n                    // Reload exercises data.\n                    parent.setState( {\n                        exerciseData: data\n                    } )\n                } )\n        } )\n    }\n\n    render() {\n        const { parent } = this.props\n\n        return (\n            <Modal size=\"lg\" show={ this.props.modal } onHide={ this.props.handleModal } centered>\n                <Form onSubmit={ this.handleSubmit }>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\"{ parent.state.create_set_exercise_name }\" 세트 추가</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <CreateEditSet parent={ parent } prefix=\"create_\" />\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" type=\"button\" size=\"lg\" onClick={ this.props.handleModal }>아니오</Button>\n                        <Button variant=\"warning\" type=\"submit\" size=\"lg\">추가</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n    \n}\n\nexport default CreateSetModal","import React, { Component } from 'react'\nimport {\n    Modal,\n    Form,\n    Button\n} from 'react-bootstrap'\nimport { RoutineUpdateExerciseDTO } from '../../api/routine/dto/routine.update.exercise.dto'\nimport { RoutineAPI } from '../../api/routine/routine.api'\n\n\ninterface EditExercisePropsInterface {\n    parent: any\n    modal: boolean\n    handleModal: any\n    exercise_id: number\n    exercise_name: string\n    handleExerciseForm: any\n}\ninterface EditExerciseStateInterface {}\n\n\nclass CreateEditExerciseModal extends Component<EditExercisePropsInterface, EditExerciseStateInterface> {\n\n    constructor( props: EditExercisePropsInterface ) {\n        super( props )\n\n        this.state = {}\n\n        this.handleSubmit = this.handleSubmit.bind( this )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const { parent, handleModal } = this.props\n        const { exercise_id, exercise_name } = this.props\n\n        const data: RoutineUpdateExerciseDTO = {\n            ID: exercise_id,\n            exercise_name: exercise_name\n        }\n\n        const response = RoutineAPI.updateExercise( data )\n\n        response.then( ( { data } ) => {\n            if ( data.raw.serverStatus === 2 ) {\n                RoutineAPI.getExercises( parent.state.block_id )\n                    .then( ( { data } ) => {\n                        parent.setState(\n                            { exerciseData: data },\n                            () => {\n                                handleModal()\n                            }\n                        )\n                    } )\n            }\n        } )\n    }\n\n    render() {\n        const { modal, handleModal, exercise_name, handleExerciseForm } = this.props\n\n        return (\n            <Modal size=\"lg\" show={ modal } onHide={ handleModal } centered>\n                <Form onSubmit={ this.handleSubmit }>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            운동 종목명 수정\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form.Group>\n                            <Form.Label htmlFor=\"edit_exercise_name\">종목</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"edit_exercise_name\"\n                                id=\"edit_exercise_name\"\n                                onChange={ handleExerciseForm }\n                                value={ exercise_name }\n                            />\n                        </Form.Group>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" type=\"button\" size=\"lg\" onClick={ handleModal }>닫기</Button>\n                        <Button type=\"submit\" size=\"lg\">수정하기</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n    \n}\n\nexport default CreateEditExerciseModal","import React, { Component } from 'react'\nimport {\n    Container,\n    Col,\n    Card,\n    Button,\n    Table,\n    Row\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n    faEdit,\n    faTrashAlt,\n    faBurn,\n    faDumbbell\n} from \"@fortawesome/free-solid-svg-icons\"\n\nimport {\n    CreateExerciseDataInterface,\n    CreateExerciseSetInterface\n} from './create.interface'\nimport { RoutineAPI } from '../../api/routine/routine.api'\nimport CreateSetModal from './CreateSetModal'\nimport CreateEditExerciseModal from './CreateEditExerciseModal'\n\n\ninterface ExerciseListPropsInterface {\n    parent: any\n}\ninterface ExerciseListStateInterface {\n    edit_exercise_modal: boolean\n    create_set_modal: boolean\n    edit_exercise_id: number\n    edit_exercise_name: string\n}\n\n\nclass CreateExerciseList extends Component<ExerciseListPropsInterface, ExerciseListStateInterface> {\n\n    constructor( props: ExerciseListPropsInterface ) {\n        super( props )\n\n        this.state = {\n            edit_exercise_modal: false,\n            create_set_modal: false,\n            edit_exercise_id: -1,\n            edit_exercise_name: ''\n        }\n\n        /** Bind events */\n        this.handleEditSet = this.handleEditSet.bind( this )\n        this.handleRemoveExercise = this.handleRemoveExercise.bind( this )\n        this.handleRemoveSet = this.handleRemoveSet.bind( this )\n        this.handleCreateSetModal = this.handleCreateSetModal.bind( this )\n        this.handleCreateSet = this.handleCreateSet.bind( this )\n        this.handleEditExercise = this.handleEditExercise.bind( this )\n        this.handleEditExerciseModal = this.handleEditExerciseModal.bind( this )\n        this.handleEditExerciseForm = this.handleEditExerciseForm.bind( this )\n    }\n\n    async handleEditExerciseModal() {\n        const { edit_exercise_modal } = this.state\n\n        this.setState( {\n            edit_exercise_modal: ! edit_exercise_modal\n        } )\n    }\n\n    async handleEditExercise( id: number, exercise_name: string ) {\n        this.handleEditExerciseModal()\n\n        this.setState( {\n            edit_exercise_id: id,\n            edit_exercise_name: exercise_name\n        } )\n    }\n\n    async handleEditExerciseForm( e: React.ChangeEvent<HTMLInputElement> ) {\n        const { value } = e.target\n\n        this.setState( {\n            edit_exercise_name: value\n        } )\n    }\n\n    async handleCreateSetModal() {\n        const { create_set_modal } = this.state\n\n        this.setState( {\n            create_set_modal: ! create_set_modal\n        } )\n    }\n\n    async handleCreateSet( exercise_id: number, exercise_name: string ) {\n        this.handleCreateSetModal()\n\n        const { parent } = this.props\n\n        parent.setState( {\n            create_set_exercise_id: exercise_id,\n            create_set_exercise_name: exercise_name\n        } )\n    }\n\n    /**\n     * Handle remove exercise.\n     * @param exercise_id \n     * @param exercise_name \n     */\n    async handleRemoveExercise( exercise_id: number, exercise_name: string ) {\n        const { parent } = this.props\n\n        parent.handleRemoveExerciseModal()\n\n        parent.setState( {\n            remove_exercise_name: exercise_name,\n            remove_exercise_id: exercise_id\n        } )\n    }\n\n    /**\n     * Handle edit set.\n     * @param exercise_name\n     * @param data\n     */\n    async handleEditSet( exercise_name: string, data: CreateExerciseSetInterface ) {\n        const { parent } = this.props\n\n        parent.handleEditSetModal()\n\n        const { set_rest } = data\n\n        const rest_minute = Math.floor( set_rest / 60 )\n        const rest_second = set_rest - ( rest_minute * 60 )\n\n        parent.setState( {\n            edit_exercise_name: exercise_name,\n            edit_ID: data.ID,\n            edit_exercise_id: data.exercise_id,\n            edit_set_number: data.set_number,\n            edit_set_reps: data.set_reps,\n            edit_set_max_reps: data.set_max_reps,\n            edit_set_disable_range: data.set_disable_range,\n            edit_set_weight: data.set_weight,\n            edit_set_rir: data.set_rir,\n            edit_set_rest_minute: rest_minute,\n            edit_set_rest_second: rest_second\n        } )\n    }\n\n    async handleRemoveSet( id: number, exercise_id: number ) {\n        const { parent } = this.props\n\n        // Remove set and reorder by set_number and get exercises data.\n        const response = RoutineAPI.removeSetAndReorder( id, exercise_id, parent.state.block_id )\n\n        response.then( response => {\n            if ( response.status === 200 ) {\n                parent.setState( { exerciseData: response.data } )\n            }\n        } )\n    }\n\n    render() {\n        const { parent } = this.props\n\n        return (\n            <Container>\n                {\n                    ( ( data ) => {\n\n                        const res: JSX.Element[] = []\n\n                        // Set item list.\n                        data.forEach( ( row: CreateExerciseDataInterface, index: number ) => {\n                            const setElements: JSX.Element[] = []\n\n                            row.sets.forEach( ( set, index ) => {\n                                const rest_minute = Math.floor( set.set_rest / 60 )\n                                const rest_second = set.set_rest - ( rest_minute * 60 )\n\n                                setElements.push(\n                                    <tr key={ index }>\n                                        <td className=\"vertical align middle set-td first-td\">\n                                            { set.set_number }세트\n                                        </td>\n                                        <td className=\"vertical align middle set-td\">\n                                            { set.set_weight }kg\n                                        </td>\n                                        <td className=\"vertical align middle set-td\">\n                                            { set.set_reps }{ ! set.set_disable_range ? `~${ set.set_max_reps }` : '' }회\n                                        </td>\n                                        <td className=\"vertical align middle set-td\">\n                                            { set.set_rir }RIR\n                                        </td>\n                                        <td className=\"vertical align middle set-td\">\n                                            { rest_minute || rest_second ? '' : '휴식없음' }\n                                            { rest_minute ? `${rest_minute}분` : '' }&nbsp;\n                                            { rest_second ? `${rest_second}초` : '' }\n                                        </td>\n                                        <td className=\"vertical align middle set-td\" width=\"10\">\n                                            <Button variant=\"link\" onClick={ () => this.handleEditSet( row.exercise_name, set ) }>\n                                                <FontAwesomeIcon icon={faEdit} title={ `${set.set_number}세트 수정` } />\n                                            </Button>\n                                        </td>\n                                        <td className=\"vertical align middle set-td last-td\" width=\"10\">\n                                            <Button variant=\"link\" onClick={ () => this.handleRemoveSet( set.ID, row.ID ) }>\n                                                <FontAwesomeIcon icon={faTrashAlt} style={{ color: '#dc3545' }} />\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            } )\n\n                            // Add set button.\n                            setElements.push(\n                                <tr key={ -1 }>\n                                    <td colSpan={ 7 } className=\"create-add-set-td\">\n                                        <Button\n                                            variant=\"secondary\"\n                                            size=\"lg\"\n                                            className=\"create-add-set-btn\"\n                                            onClick={ () => this.handleCreateSet( row.ID, row.exercise_name ) }\n                                        >\n                                            세트 추가\n                                        </Button>\n                                    </td>\n                                </tr>\n                            )\n\n                            // Exercise item card.\n                            res.push(\n                                <Card className=\"create-item\" key={ index }>\n                                    <Card.Header>\n                                        <Row>\n                                            <Col xs={ 8 }>\n                                                <h5 className=\"create-exercise-header no margin\">\n                                                    <FontAwesomeIcon icon={ faBurn } />\n                                                    &nbsp;{ row.exercise_name }\n                                                </h5>\n                                            </Col>\n                                            <Col xs={ 4 } className=\"text align right create-exercise-remove-btn\">\n                                                <Button variant=\"link\" onClick={ () => this.handleEditExercise( row.ID, row.exercise_name ) }>\n                                                    <FontAwesomeIcon icon={faEdit} title=\"운동 종목명 변경\" />\n                                                </Button>\n                                                <Button variant=\"link\" onClick={ () => this.handleRemoveExercise( row.ID, row.exercise_name ) }>\n                                                    <FontAwesomeIcon icon={faTrashAlt} style={{ color: '#dc3545' }} />\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Card.Header>\n                                    <Card.Body className=\"no padding\">\n                                        <Table className=\"record-item-table no margin text align center\">\n                                            <tbody>\n                                                { setElements }\n                                            </tbody>\n                                        </Table>\n                                    </Card.Body>\n                                </Card>\n                            )\n                        } )\n\n                        return res\n\n                    } )( parent.state.exerciseData )\n                }\n\n                <Button variant=\"warning\" type=\"button\" size=\"lg\" className=\"create-modal-btn\" onClick={ parent.handleCreateModal }>\n                    <FontAwesomeIcon icon={ faDumbbell } />&nbsp;\n                    종목 추가하기\n                </Button>\n\n                {/** Create set modal component. */}\n                <CreateEditExerciseModal\n                    parent={ parent }\n                    modal={ this.state.edit_exercise_modal }\n                    handleModal={ this.handleEditExerciseModal }\n                    exercise_id={ this.state.edit_exercise_id }\n                    exercise_name={ this.state.edit_exercise_name }\n                    handleExerciseForm={ this.handleEditExerciseForm }\n                />\n\n                {/** Create set modal component. */}\n                <CreateSetModal modal={ this.state.create_set_modal } handleModal={ this.handleCreateSetModal } parent={ parent } />\n\n            </Container>\n        )\n    }\n}\n\nexport default CreateExerciseList","import React, { Component } from 'react'\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n    Modal,\n    Form,\n    OverlayTrigger,\n    Popover\n} from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faEdit, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { RoutineAPI } from '../../api/routine/routine.api'\nimport { RoutineUpdateBlockDTO } from '../../api/routine/dto/routine.update.block.dto'\n\n\ninterface PropsInterface {\n    block_id: number\n    history: any\n}\ninterface StateInterface {\n    block_title: string\n    edit_block_title: string\n    modal: boolean\n    popover: boolean\n}\n\n\nclass CreateExerciseBlockTitle extends Component<PropsInterface, StateInterface> {\n\n    constructor( props: PropsInterface ) {\n        super( props )\n\n        this.state = {\n            block_title: '',\n            edit_block_title: '',\n            modal: false,\n            popover: false\n        }\n\n        this.handleModal = this.handleModal.bind( this )\n        this.handlePopover = this.handlePopover.bind( this )\n        this.handleChange = this.handleChange.bind( this )\n        this.handleSubmit = this.handleSubmit.bind( this )\n        this.handleRemove = this.handleRemove.bind( this )\n        this.handlePrevious = this.handlePrevious.bind( this )\n    }\n\n    componentDidMount() {\n        const { block_id } = this.props\n\n        // Get block and set block title.\n        RoutineAPI.getBlock( block_id ).then( response => {\n            this.setState( {\n                block_title: response.data.block_title,\n                edit_block_title: response.data.block_title,\n            } )\n        } )\n    }\n\n    async handleModal() {\n        const { modal } = this.state\n\n        this.setState( {\n            modal: !modal,\n            popover: false\n        } )\n    }\n\n    async handleChange( e: React.ChangeEvent<HTMLInputElement> ) {\n        const { value } = e.target\n\n        this.setState( {\n            edit_block_title: value\n        } )\n    }\n\n    async handlePopover() {\n        const { popover } = this.state\n\n        this.setState( {\n            popover: !popover\n        } )\n    }\n\n    async handleSubmit( e: React.FormEvent<HTMLFormElement> ) {\n        e.preventDefault()\n\n        const { edit_block_title } = this.state\n\n        const data: RoutineUpdateBlockDTO = {\n            ID: this.props.block_id,\n            block_title: edit_block_title\n        }\n        RoutineAPI.updateBlock( data ).then( response => {\n            if ( response.data.raw.serverStatus === 2 ) {\n                this.setState( {\n                    block_title: edit_block_title\n                } )\n                this.handleModal()\n            }\n        } )\n\n    }\n\n    async handleRemove() {\n        const { block_id } = this.props\n\n        RoutineAPI.removeBlock( block_id ).then( response => {\n            if ( response.data.raw.serverStatus === 2 ) {\n                this.props.history.push( '/' )\n            }\n        } )\n    }\n\n    async handlePrevious() {\n        this.props.history.goBack()\n    }\n\n    render() {\n        return (\n            <div className=\"create-exercise-nav\">\n                <div className=\"create-exercise-block-title\">\n                    <Container>\n                        <Row>\n                            <Col xs=\"3\" sm=\"3\" md=\"4\" lg=\"4\">\n                                <Button variant=\"link\" className=\"nav-previous icon-button\" onClick={this.handlePrevious}>\n                                    <FontAwesomeIcon icon={faChevronLeft} className=\"button-icon\" />\n                                    뒤로\n                                </Button>\n                            </Col>\n                            <Col xs=\"6\" sm=\"6\" md=\"4\" lg=\"4\" className=\"text align center\">\n                                <h4 className=\"create-exercise-block-h\">\n                                    { this.state.block_title }\n                                </h4>\n                            </Col>\n                            <Col xs=\"3\" sm=\"3\" md=\"4\" lg=\"4\" className=\"text align right\">\n                                <Button variant=\"link\" title=\"블럭 제목 수정하기\" onClick={ this.handleModal }>\n                                    <FontAwesomeIcon icon={faEdit} />\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n\n                <Modal show={ this.state.modal } onHide={ this.handleModal } centered>\n                    <form onSubmit={ this.handleSubmit }>\n                        <Modal.Header>\n                            <Modal.Title>\"{ this.state.block_title }\" 수정</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"block_title\">블록명</Form.Label>\n                                <Form.Control id=\"block_title\" name=\"block_title\" onChange={ this.handleChange } value={ this.state.edit_block_title } />\n                            </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" type=\"button\" size=\"lg\" onClick={ this.handleModal }>닫기</Button>\n                            <OverlayTrigger\n                                trigger=\"click\"\n                                placement=\"bottom\"\n                                show={ this.state.popover }\n                                overlay={\n                                <Popover id=\"remove-block-check-popover\">\n                                    <Popover.Title as=\"h3\">\"{ this.state.block_title }\" 블럭을 정말로 삭제 하실건가요?</Popover.Title>\n                                    <Popover.Content className=\"text align center\">\n                                        <Button variant=\"outline-success\" type=\"button\" size=\"sm\" onClick={ this.handlePopover }>아니요.</Button>&nbsp;\n                                        <Button variant=\"outline-danger\" type=\"button\" size=\"sm\" onClick={ this.handleRemove }>네 삭제할거에요.</Button>\n                                    </Popover.Content>\n                                </Popover>\n                                }                      \n                            >\n                                <Button variant=\"danger\" type=\"button\" size=\"lg\" onClick={ this.handlePopover }>삭제</Button>\n                            </OverlayTrigger>\n                            <Button type=\"submit\" size=\"lg\">수정하기</Button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default CreateExerciseBlockTitle","import React, { Component } from 'react'\n\nimport {\n    CreatePropsInterface,\n    CreateStateInterface\n} from './create.interface'\nimport CreateEditSetModal from './CreateEditSetModal'\nimport CreateExerciseModal from './CreateExerciseModal'\nimport CreateRemoveExerciseModal from './CreateRemoveExerciseModal'\nimport { RoutineAPI } from '../../api/routine/routine.api'\n\nimport './create.css'\nimport CreateExerciseList from './CreateExerciseList'\nimport CreateExerciseBlockTitle from './CreateExerciseBlockTitle'\n\n\nclass CreateExercise extends Component<CreatePropsInterface, CreateStateInterface> {\n\n    constructor( props: CreatePropsInterface ) {\n        super( props )\n\n        const { block_id } = props.match.params\n\n        this.state = {\n            // UI/UX state.\n            create_modal: false,\n            weight_plate: 20,\n            remove_exercise_modal: false,\n\n            // Remove state.\n            remove_exercise_name: '',\n            remove_exercise_id: null,\n\n            // Create exercise state.\n            block_id: Number( block_id ),\n            exercise_name: '',\n            set_number: 3,\n            set_weight: 20,\n            set_reps: 8,\n            set_max_reps: 10,\n            set_disable_range: true,\n            set_rir: 0,\n            set_rest_minute: 1,\n            set_rest_second: 30,\n\n            // Edit set state.\n            edit_set_modal: false,\n            edit_exercise_name: '',\n            edit_ID: -1,\n            edit_exercise_id: -1,\n            edit_set_number: -1,\n            edit_set_reps: -1,\n            edit_set_max_reps: -1,\n            edit_set_disable_range: 0,\n            edit_set_weight: -1,\n            edit_set_rir: -1,\n            edit_set_rest_minute: -1,\n            edit_set_rest_second: -1,\n\n            // Create set state.\n            create_set_exercise_name: '',\n            create_set_exercise_id: -1,\n            create_set_reps: 1,\n            create_set_max_reps: 2,\n            create_set_disable_range: true,\n            create_set_weight: 0,\n            create_set_rir: 0,\n            create_set_rest_minute: 1,\n            create_set_rest_second: 30,\n\n            // Getting state.\n            exerciseData: []\n        }\n\n        /** Bind events */\n\n        this.validateForm = this.validateForm.bind( this )\n\n        /** Create exercise events. */\n        this.handleRange = this.handleRange.bind( this )\n        this.handlePlateToggle = this.handlePlateToggle.bind( this )\n        this.handleForm = this.handleForm.bind( this )\n        this.handleIncrement = this.handleIncrement.bind( this )\n        this.handleIncreaseWeight = this.handleIncreaseWeight.bind( this )\n        this.handleCreateModal = this.handleCreateModal.bind( this )\n\n        /** Remove exercise events. */\n        this.handleRemoveExerciseModal = this.handleRemoveExerciseModal.bind( this )\n\n        /** Edit set event. */\n        this.handleEditSetModal = this.handleEditSetModal.bind( this )\n    }\n\n    // Refs.\n    private exerciseRef = React.createRef<any>()\n\n    /**\n     * componentDidMount.\n     */\n    componentDidMount() {\n        const { block_id } = this.state\n\n        // Get exercises.\n        RoutineAPI.getExercises( block_id ).then( response => {\n            this.setState( {\n                exerciseData: response.data\n            } )\n        } )\n    }\n\n    /**\n     * Handle edit set modal.\n     */\n    async handleEditSetModal() {\n        const { edit_set_modal } = this.state\n\n        this.setState( {\n            edit_set_modal: ! edit_set_modal,\n        } )\n    }\n\n    /**\n     * Handle remove exercise modal.\n     */\n    async handleRemoveExerciseModal() {\n        const { remove_exercise_modal } = this.state\n\n        this.setState( {\n            remove_exercise_modal: ! remove_exercise_modal\n        } )\n    }\n\n    /**\n     * Handle create modal.\n     */\n    async handleCreateModal() {\n        const { create_modal } = this.state\n\n        this.setState( { create_modal: !create_modal } )\n    }\n\n    /**\n     * Handle disable range.\n     * @param e Change event from form control.\n     */\n    async handleRange( e: React.ChangeEvent<HTMLInputElement>, prefix?: string ) {\n        const is_prefix = prefix ? prefix : ''\n        const { checked } = e.target\n\n        this.setState( {\n            [ `${is_prefix}set_disable_range` ]: !checked\n        } )\n    }\n\n    /**\n     * Select weight increment and decrement value.\n     * @param e Change event from form control.\n     */\n    async handlePlateToggle( e: React.ChangeEvent<HTMLInputElement> ) {\n        const { value } = e.target\n\n        this.setState( {\n            weight_plate: Number( value )\n        } )\n    }\n\n    /**\n     * Handle increment or decrement to button of weight.\n     * @param i \n     */\n    async handleIncreaseWeight( i: number, prefix?: string ) {\n        const is_prefix = prefix ? prefix : ''\n        const increment = this.state.weight_plate * i\n        let value = Number( this.state[ `${is_prefix}set_weight` ] ) + increment\n\n        const update = await this.validateForm( `${is_prefix}set_weight`, value, is_prefix )\n\n        this.setState( update )\n    }\n\n    /**\n     * Handle increment or decrement to button.\n     * @param target_name State name.\n     * @param i Increment value.\n     * @param prefix Use prefix to give it unique name.\n     */\n    async handleIncrement( target_name: string, i: number, prefix?: string ) {\n        const value = this.state[ target_name ]\n        let increment_value = Number( value ) + i\n\n        const update = await this.validateForm( target_name, increment_value, prefix ? prefix : '' )\n    \n        this.setState( update )\n    }\n\n    /**\n     * Handle form control.\n     * @param e Change event from form control.\n     */\n    async handleForm( e: React.ChangeEvent<HTMLInputElement>, prefix: string ) {\n\n        const { name, value } = e.target\n\n        const update = this.validateForm( name, value, prefix )\n\n        this.setState( await update )\n    }\n\n    /**\n     * Validate form.\n     * @param name \n     * @param value \n     * @param prefix \n     */\n    async validateForm( name: string, value: string | number, prefix: string ): Promise<any> {\n        const res: CreateStateInterface = { ...this.state }\n\n        const validNumber = async ( value: any, default_value: number ) => {\n            const number_value = Number( value )\n            let res = number_value\n\n            if ( isNaN( number_value ) ) res = default_value\n            else if ( number_value < default_value ) res = default_value\n\n            return res\n        }\n\n        switch( name ) {\n            // Valid exercise_name\n            case `${prefix}exercise_name`:\n                if ( value )\n                    this.exerciseRef.current.style.border = '1px solid #ced4da'\n\n                res[ name ] = value\n            break\n\n            // Valid number.\n            case `${prefix}set_number`:\n                    const number_value = await validNumber( value, 1 )\n                res[ name ] = number_value\n            break\n\n            // Valid set_rest_second\n            case `${prefix}set_rir`:\n                const rir_value = await validNumber( value, 0 )\n                res[ name ] = rir_value\n            break\n            \n            // Valid set_rest_second\n            case `${prefix}set_rest_minute`:\n            case `${prefix}set_rest_second`:\n                const rest_value = await validNumber( value, 0 )\n                res[ name ] = rest_value\n            break\n\n            // Valid set_weight\n            case `${prefix}set_weight`:\n                const weight_value = await validNumber( value, 0 )\n                res[ name ] = weight_value\n            break\n\n            // Valid set_reps\n            case `${prefix}set_reps`:\n                // Validate value and set value from reps.\n                let reps_value = await validNumber( value, 1 )\n                res[ name ] = reps_value\n\n                const max_reps = this.state[ `${prefix}set_max_reps` ]! as number\n\n                // Increase max_reps when reps is higher than max_reps.\n                if ( max_reps <= reps_value )\n                    res[ `${prefix}set_max_reps` ] = reps_value + 1\n            break\n\n            // Valid set_max_reps\n            case `${prefix}set_max_reps`:\n                // Validate value and set value from max_reps.\n                let max_reps_value = await validNumber( value, 2 )\n                res[ name ] = max_reps_value\n\n                const reps = this.state[ `${prefix}set_reps` ]! as number\n\n                // Decrease reps when max_reps lower than reps.\n                if ( reps >= max_reps_value )\n                    res[ `${prefix}set_reps` ] = max_reps_value - 1\n\n            break\n        }\n\n        return res\n    }\n\n    render() {\n        return (\n            <>\n                <CreateExerciseBlockTitle block_id={ this.state.block_id } history={ this.props.history } />\n\n                <main className=\"create-main\">\n                    {/** Exercise list. */}\n                    <CreateExerciseList parent={ this } />\n\n                    {/** Edit set modal. */}\n                    <CreateEditSetModal parent={ this } prefix=\"edit_\" />\n\n                    {/** Create exercise modal. */}\n                    <CreateExerciseModal parent={ this } prefix=\"\" />\n\n                    {/** Remove exercise modal. */}\n                    <CreateRemoveExerciseModal parent={ this } />\n                </main>\n            </>\n        )\n    }\n}\n\nexport default CreateExercise","import React, { Component } from 'react'\n\ninterface NotFoundPropsInterface {}\ninterface NotFoundStateInterface {}\n\nclass NotFound extends Component<NotFoundPropsInterface,NotFoundStateInterface > {\n\n    constructor( props: NotFoundPropsInterface ) {\n        super( props )\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <main className=\"main\">\n                <div className=\"container\">\n                    <h1>Not Found Page..</h1>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default NotFound","import React from \"react\"\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n    faCalendarAlt,\n    faClipboardCheck,\n    faDumbbell,\n    faSignOutAlt,\n    faSignInAlt\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { Container } from \"react-bootstrap\"\n\nimport './navigation.css'\nimport { LoginAPI } from \"../../api/users/login.api\"\nimport { useStoreDispatch, useStoreState } from \"../../store\"\n\n\nfunction Navigation() {\n    const { pathname } = useLocation()\n    const history = useHistory()\n    const dispatch = useStoreDispatch()\n    const { user } = useStoreState()\n\n    // Handle click.\n    const handleLogout = ( e: React.MouseEvent<HTMLAnchorElement> ) => {\n        e.preventDefault()\n\n        LoginAPI.logout()\n        dispatch( { type: 'LOGOUT' } )\n\n        // Move login.\n        history.push( '/login' )\n    }\n\n\n    // Active item.\n    const activeItem = ( name: string ) => {\n        const params = pathname.split( '/' )\n        return params[ 1 ] === `${name}` ? 'active' : ''\n    }\n\n\n    // Sign in or out.\n    const signIn = <Link to=\"/login\">\n                        <FontAwesomeIcon icon={ faSignInAlt } title=\"로그인\" />\n                    </Link>\n\n    const signOut = <Link to=\"/login\" onClick={ handleLogout }>\n                        <FontAwesomeIcon icon={ faSignOutAlt } title=\"로그아웃\" />\n                    </Link>\n\n    // Set sign in or out.\n    let signInOrOut\n    if ( user ) signInOrOut = signOut\n    else signInOrOut = signIn\n\n\n    // Return...\n    return (\n        <nav className=\"mwr-nav text align center\">\n\n            <Container>\n\n                <ul className=\"mwr-nav-list\">\n\n                    <li className={ `mwr-nav-item ${ activeItem( 'login' ) }` }>\n                        { signInOrOut }\n                    </li>\n\n                    <li className={ `mwr-nav-item ${ activeItem( 'routine' ) }` }>\n                        <Link to=\"/routine\">\n                            <FontAwesomeIcon icon={ faDumbbell } title=\"내 루틴 확인\" />\n                        </Link>\n                    </li>\n\n                    <li className={ `mwr-nav-item ${ activeItem( '' ) }` }>\n                        <Link to=\"/\">\n                            <FontAwesomeIcon icon={ faCalendarAlt } title=\"기록된 운동 목록\" />\n                        </Link>\n                    </li>\n\n                    <li className={ `mwr-nav-item ${ activeItem( 'record' ) }` }>\n                        <Link to=\"/record\">\n                            <FontAwesomeIcon icon={ faClipboardCheck } title=\"운동기록 상세확인\" />\n                        </Link>\n                    </li>\n\n                </ul>\n\n            </Container>\n\n        </nav>\n    )\n}\n\nexport default Navigation","import React, { Component } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faDumbbell } from \"@fortawesome/free-solid-svg-icons\"\n\n\ninterface RoutinePropsInterface {}\ninterface RoutineStateInterface {}\n\n\nclass Routine extends Component<RoutinePropsInterface, RoutineStateInterface> {\n\n    constructor( props: RoutinePropsInterface ) {\n        super( props )\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <main className=\"main\">\n\n                <Container>\n\n                    <h2>\n                        <FontAwesomeIcon icon={ faDumbbell } />&nbsp;\n                        루틴 만들기\n                    </h2>\n\n                </Container>\n\n            </main>\n        )\n    }\n}\n\nexport default Routine","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch, useLocation } from 'react-router-dom'\n\nimport AuthRoute from './components/AuthRoute'\nimport Calendar from './components/calendar/Calendar'\nimport Login from './components/login/Login'\nimport Record from './components/record/Record'\nimport CreateExercise from './components/create/CreateExercise'\nimport NotFound from './components/notfound/NotFound'\nimport Navigation from './components/layout/Navigation'\nimport Routine from './components/routine/Routine'\n\nimport { useStoreDispatch } from './store'\nimport { LoginAPI } from './api/users/login.api'\n\n\nfunction App() {\n    const dispatch = useStoreDispatch()\n    const location = useLocation()\n\n    React.useEffect( () => {\n        // Testing..\n        dispatch( { type: 'LOGIN' } )\n        \n        LoginAPI.refresh(\n            () => {\n                dispatch( { type: 'LOGIN' } )\n            },\n            error => {\n                dispatch( { type: 'LOGOUT' } )\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [] )\n\n    return (\n        <div className=\"mwr-content\">\n            <Router>\n                <Switch>\n                    <Route\n                        path=\"/login\"\n                        render={\n                            props => <Login history={ props.history } location_pathname={ location.pathname } />\n                        }\n                    />\n\n                    <AuthRoute\n                        path=\"/\"\n                        render={ props => <Calendar { ...props } /> }\n                        exact={ true }\n                    />\n\n                    <AuthRoute\n                        path=\"/create/exercise/:block_id\"\n                        render={ props => <CreateExercise { ...props } /> }\n                    />\n\n                    <AuthRoute\n                        path=\"/record/:record_id\"\n                        render={ props => <Record { ...props } /> }\n                    />\n\n                    <AuthRoute\n                        path=\"/routine\"\n                        render={ props => <Routine { ...props } /> }\n                    />\n\n                    <Route component={ NotFound } />\n                </Switch>\n\n                {/** Layout navigation */}\n                <Navigation />\n            </Router>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport axios from 'axios'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App'\nimport { StoreProvider } from './store'\n\nimport './common/normalize.minify.css'\nimport './common/common.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n// Axios defaults config.\naxios.defaults.baseURL = process.env.REACT_APP_REST_URI\naxios.defaults.withCredentials = true\n\nexport default function Root() {\n    return (\n        <StoreProvider>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </StoreProvider>\n    )\n}\n\nReactDOM.render( Root(), document.getElementById( 'root' ) )"],"sourceRoot":""}